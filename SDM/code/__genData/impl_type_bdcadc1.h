#ifndef ____BDCADC1_H__
#define ____BDCADC1_H__


#include "cstdint"






struct BDCADC1 {
public:
	std::uint8_t ADC_SBMAuthst;
	std::uint8_t ADC_PAAChallengeReceive;
	std::uint8_t ADC_PAAChallenge1SBM;
	std::uint8_t ADC_PAAChallenge2SBM;
	std::uint8_t ADC_PAAChallenge1TEL;
	std::uint8_t ADC_PAAChallenge2TEL;
	std::uint8_t ADC_HPAStrtgEndgPointInfo;
	std::uint8_t ADC_HPALearningProcessInfo;
	std::uint8_t ADC_HPALearningFailedInfo;
	std::uint16_t ADC_HPAResRouteLeg;
	std::uint16_t ADC_HPAUseActDis;
	std::uint8_t ADC_HPAProcRat;
	std::uint16_t ADC_HPAUseTolTime;
	std::uint8_t ADC_SlotSelectFebk;
	std::uint16_t ADC_AVPParkSlotInfo;
	std::uint8_t ADC_SwitchStShow;
	std::uint8_t ADC_HPASwitchStShow;
	std::uint8_t ADC_AVPSwitchStShow;
	std::uint8_t ADC_APAst;
	std::uint8_t ADC_AVPst;
	std::uint8_t ADC_PAAFuncSt;
	std::uint8_t ADC_AVPActFuncind;
	std::uint16_t ADC_PAADrvInteraction;
	std::uint8_t ADC_PAARemoteParkingMode;
	std::uint8_t ADC_PAARemoteParkingEnable;
	std::uint8_t ADC_LongCtrlModeForBrkSys_B;
	std::uint16_t ADC_LongCtrlTargetAx_B;
	std::uint8_t ADC_LongCtrlTargetAxReq_B;
	std::uint8_t ADC_LongCtrlTypReq_B;
	std::uint8_t ADC_LongCtrlDecToStopReq_B;
	std::uint8_t ADC_LongctrlSecureReq_B;
	std::uint16_t ADC_ActTrqReq_B;
	std::uint8_t ADC_ActTrqReqVD_B;
	std::uint8_t ADC_VLCSt_B;
	std::uint8_t ADC_ActTrqReqVD;
	std::uint8_t ADC_VLCSt;
	std::uint16_t ADC_ActTrqReq;
	std::uint8_t ADC_ADASLongCtrlFuncMode;
	std::uint8_t ADC_LongCtrlAvailability;
	std::uint8_t ADC_LongCtrlModeForBrkSys;
	std::uint8_t ADC_LongCtrlTargetAxReq;
	std::uint8_t ADC_LongCtrlTypReq;
	std::uint8_t ADC_LongCtrlDecToStopReq;
	std::uint8_t ADC_LongCtrlDriveOff;
	std::uint8_t ADC_LongctrlSecureReq;
	std::uint8_t ADC_PAAGrarLvlReq;
	std::uint8_t ADC_PAAGrarLvlReqEnable;
/*
	BDCADC1() {}
	~BDCADC1() {}
	BDCADC1(const std::uint8_t _ADC_SBMAuthst,const std::uint8_t _ADC_PAAChallengeReceive,const std::uint8_t _ADC_PAAChallenge1SBM,const std::uint8_t _ADC_PAAChallenge2SBM,const std::uint8_t _ADC_PAAChallenge1TEL,const std::uint8_t _ADC_PAAChallenge2TEL,const std::uint8_t _ADC_HPAStrtgEndgPointInfo,const std::uint8_t _ADC_HPALearningProcessInfo,const std::uint8_t _ADC_HPALearningFailedInfo,const std::uint16_t _ADC_HPAResRouteLeg,const std::uint16_t _ADC_HPAUseActDis,const std::uint8_t _ADC_HPAProcRat,const std::uint16_t _ADC_HPAUseTolTime,const std::uint8_t _ADC_SlotSelectFebk,const std::uint16_t _ADC_AVPParkSlotInfo,const std::uint8_t _ADC_SwitchStShow,const std::uint8_t _ADC_HPASwitchStShow,const std::uint8_t _ADC_AVPSwitchStShow,const std::uint8_t _ADC_APAst,const std::uint8_t _ADC_AVPst,const std::uint8_t _ADC_PAAFuncSt,const std::uint8_t _ADC_AVPActFuncind,const std::uint16_t _ADC_PAADrvInteraction,const std::uint8_t _ADC_PAARemoteParkingMode,const std::uint8_t _ADC_PAARemoteParkingEnable,const std::uint8_t _ADC_LongCtrlModeForBrkSys_B,const std::uint16_t _ADC_LongCtrlTargetAx_B,const std::uint8_t _ADC_LongCtrlTargetAxReq_B,const std::uint8_t _ADC_LongCtrlTypReq_B,const std::uint8_t _ADC_LongCtrlDecToStopReq_B,const std::uint8_t _ADC_LongctrlSecureReq_B,const std::uint16_t _ADC_ActTrqReq_B,const std::uint8_t _ADC_ActTrqReqVD_B,const std::uint8_t _ADC_VLCSt_B,const std::uint8_t _ADC_ActTrqReqVD,const std::uint8_t _ADC_VLCSt,const std::uint16_t _ADC_ActTrqReq,const std::uint8_t _ADC_ADASLongCtrlFuncMode,const std::uint8_t _ADC_LongCtrlAvailability,const std::uint8_t _ADC_LongCtrlModeForBrkSys,const std::uint8_t _ADC_LongCtrlTargetAxReq,const std::uint8_t _ADC_LongCtrlTypReq,const std::uint8_t _ADC_LongCtrlDecToStopReq,const std::uint8_t _ADC_LongCtrlDriveOff,const std::uint8_t _ADC_LongctrlSecureReq,const std::uint8_t _ADC_PAAGrarLvlReq,const std::uint8_t _ADC_PAAGrarLvlReqEnable):ADC_SBMAuthst(_ADC_SBMAuthst),ADC_PAAChallengeReceive(_ADC_PAAChallengeReceive),ADC_PAAChallenge1SBM(_ADC_PAAChallenge1SBM),ADC_PAAChallenge2SBM(_ADC_PAAChallenge2SBM),ADC_PAAChallenge1TEL(_ADC_PAAChallenge1TEL),ADC_PAAChallenge2TEL(_ADC_PAAChallenge2TEL),ADC_HPAStrtgEndgPointInfo(_ADC_HPAStrtgEndgPointInfo),ADC_HPALearningProcessInfo(_ADC_HPALearningProcessInfo),ADC_HPALearningFailedInfo(_ADC_HPALearningFailedInfo),ADC_HPAResRouteLeg(_ADC_HPAResRouteLeg),ADC_HPAUseActDis(_ADC_HPAUseActDis),ADC_HPAProcRat(_ADC_HPAProcRat),ADC_HPAUseTolTime(_ADC_HPAUseTolTime),ADC_SlotSelectFebk(_ADC_SlotSelectFebk),ADC_AVPParkSlotInfo(_ADC_AVPParkSlotInfo),ADC_SwitchStShow(_ADC_SwitchStShow),ADC_HPASwitchStShow(_ADC_HPASwitchStShow),ADC_AVPSwitchStShow(_ADC_AVPSwitchStShow),ADC_APAst(_ADC_APAst),ADC_AVPst(_ADC_AVPst),ADC_PAAFuncSt(_ADC_PAAFuncSt),ADC_AVPActFuncind(_ADC_AVPActFuncind),ADC_PAADrvInteraction(_ADC_PAADrvInteraction),ADC_PAARemoteParkingMode(_ADC_PAARemoteParkingMode),ADC_PAARemoteParkingEnable(_ADC_PAARemoteParkingEnable),ADC_LongCtrlModeForBrkSys_B(_ADC_LongCtrlModeForBrkSys_B),ADC_LongCtrlTargetAx_B(_ADC_LongCtrlTargetAx_B),ADC_LongCtrlTargetAxReq_B(_ADC_LongCtrlTargetAxReq_B),ADC_LongCtrlTypReq_B(_ADC_LongCtrlTypReq_B),ADC_LongCtrlDecToStopReq_B(_ADC_LongCtrlDecToStopReq_B),ADC_LongctrlSecureReq_B(_ADC_LongctrlSecureReq_B),ADC_ActTrqReq_B(_ADC_ActTrqReq_B),ADC_ActTrqReqVD_B(_ADC_ActTrqReqVD_B),ADC_VLCSt_B(_ADC_VLCSt_B),ADC_ActTrqReqVD(_ADC_ActTrqReqVD),ADC_VLCSt(_ADC_VLCSt),ADC_ActTrqReq(_ADC_ActTrqReq),ADC_ADASLongCtrlFuncMode(_ADC_ADASLongCtrlFuncMode),ADC_LongCtrlAvailability(_ADC_LongCtrlAvailability),ADC_LongCtrlModeForBrkSys(_ADC_LongCtrlModeForBrkSys),ADC_LongCtrlTargetAxReq(_ADC_LongCtrlTargetAxReq),ADC_LongCtrlTypReq(_ADC_LongCtrlTypReq),ADC_LongCtrlDecToStopReq(_ADC_LongCtrlDecToStopReq),ADC_LongCtrlDriveOff(_ADC_LongCtrlDriveOff),ADC_LongctrlSecureReq(_ADC_LongctrlSecureReq),ADC_PAAGrarLvlReq(_ADC_PAAGrarLvlReq),ADC_PAAGrarLvlReqEnable(_ADC_PAAGrarLvlReqEnable) {}
	BDCADC1(const BDCADC1 &_x){
		ADC_SBMAuthst = _x.ADC_SBMAuthst;
		ADC_PAAChallengeReceive = _x.ADC_PAAChallengeReceive;
		ADC_PAAChallenge1SBM = _x.ADC_PAAChallenge1SBM;
		ADC_PAAChallenge2SBM = _x.ADC_PAAChallenge2SBM;
		ADC_PAAChallenge1TEL = _x.ADC_PAAChallenge1TEL;
		ADC_PAAChallenge2TEL = _x.ADC_PAAChallenge2TEL;
		ADC_HPAStrtgEndgPointInfo = _x.ADC_HPAStrtgEndgPointInfo;
		ADC_HPALearningProcessInfo = _x.ADC_HPALearningProcessInfo;
		ADC_HPALearningFailedInfo = _x.ADC_HPALearningFailedInfo;
		ADC_HPAResRouteLeg = _x.ADC_HPAResRouteLeg;
		ADC_HPAUseActDis = _x.ADC_HPAUseActDis;
		ADC_HPAProcRat = _x.ADC_HPAProcRat;
		ADC_HPAUseTolTime = _x.ADC_HPAUseTolTime;
		ADC_SlotSelectFebk = _x.ADC_SlotSelectFebk;
		ADC_AVPParkSlotInfo = _x.ADC_AVPParkSlotInfo;
		ADC_SwitchStShow = _x.ADC_SwitchStShow;
		ADC_HPASwitchStShow = _x.ADC_HPASwitchStShow;
		ADC_AVPSwitchStShow = _x.ADC_AVPSwitchStShow;
		ADC_APAst = _x.ADC_APAst;
		ADC_AVPst = _x.ADC_AVPst;
		ADC_PAAFuncSt = _x.ADC_PAAFuncSt;
		ADC_AVPActFuncind = _x.ADC_AVPActFuncind;
		ADC_PAADrvInteraction = _x.ADC_PAADrvInteraction;
		ADC_PAARemoteParkingMode = _x.ADC_PAARemoteParkingMode;
		ADC_PAARemoteParkingEnable = _x.ADC_PAARemoteParkingEnable;
		ADC_LongCtrlModeForBrkSys_B = _x.ADC_LongCtrlModeForBrkSys_B;
		ADC_LongCtrlTargetAx_B = _x.ADC_LongCtrlTargetAx_B;
		ADC_LongCtrlTargetAxReq_B = _x.ADC_LongCtrlTargetAxReq_B;
		ADC_LongCtrlTypReq_B = _x.ADC_LongCtrlTypReq_B;
		ADC_LongCtrlDecToStopReq_B = _x.ADC_LongCtrlDecToStopReq_B;
		ADC_LongctrlSecureReq_B = _x.ADC_LongctrlSecureReq_B;
		ADC_ActTrqReq_B = _x.ADC_ActTrqReq_B;
		ADC_ActTrqReqVD_B = _x.ADC_ActTrqReqVD_B;
		ADC_VLCSt_B = _x.ADC_VLCSt_B;
		ADC_ActTrqReqVD = _x.ADC_ActTrqReqVD;
		ADC_VLCSt = _x.ADC_VLCSt;
		ADC_ActTrqReq = _x.ADC_ActTrqReq;
		ADC_ADASLongCtrlFuncMode = _x.ADC_ADASLongCtrlFuncMode;
		ADC_LongCtrlAvailability = _x.ADC_LongCtrlAvailability;
		ADC_LongCtrlModeForBrkSys = _x.ADC_LongCtrlModeForBrkSys;
		ADC_LongCtrlTargetAxReq = _x.ADC_LongCtrlTargetAxReq;
		ADC_LongCtrlTypReq = _x.ADC_LongCtrlTypReq;
		ADC_LongCtrlDecToStopReq = _x.ADC_LongCtrlDecToStopReq;
		ADC_LongCtrlDriveOff = _x.ADC_LongCtrlDriveOff;
		ADC_LongctrlSecureReq = _x.ADC_LongctrlSecureReq;
		ADC_PAAGrarLvlReq = _x.ADC_PAAGrarLvlReq;
		ADC_PAAGrarLvlReqEnable = _x.ADC_PAAGrarLvlReqEnable;
	}
	BDCADC1(BDCADC1 &&_x){
		ADC_SBMAuthst = std::move(_x.ADC_SBMAuthst);
		ADC_PAAChallengeReceive = std::move(_x.ADC_PAAChallengeReceive);
		ADC_PAAChallenge1SBM = std::move(_x.ADC_PAAChallenge1SBM);
		ADC_PAAChallenge2SBM = std::move(_x.ADC_PAAChallenge2SBM);
		ADC_PAAChallenge1TEL = std::move(_x.ADC_PAAChallenge1TEL);
		ADC_PAAChallenge2TEL = std::move(_x.ADC_PAAChallenge2TEL);
		ADC_HPAStrtgEndgPointInfo = std::move(_x.ADC_HPAStrtgEndgPointInfo);
		ADC_HPALearningProcessInfo = std::move(_x.ADC_HPALearningProcessInfo);
		ADC_HPALearningFailedInfo = std::move(_x.ADC_HPALearningFailedInfo);
		ADC_HPAResRouteLeg = std::move(_x.ADC_HPAResRouteLeg);
		ADC_HPAUseActDis = std::move(_x.ADC_HPAUseActDis);
		ADC_HPAProcRat = std::move(_x.ADC_HPAProcRat);
		ADC_HPAUseTolTime = std::move(_x.ADC_HPAUseTolTime);
		ADC_SlotSelectFebk = std::move(_x.ADC_SlotSelectFebk);
		ADC_AVPParkSlotInfo = std::move(_x.ADC_AVPParkSlotInfo);
		ADC_SwitchStShow = std::move(_x.ADC_SwitchStShow);
		ADC_HPASwitchStShow = std::move(_x.ADC_HPASwitchStShow);
		ADC_AVPSwitchStShow = std::move(_x.ADC_AVPSwitchStShow);
		ADC_APAst = std::move(_x.ADC_APAst);
		ADC_AVPst = std::move(_x.ADC_AVPst);
		ADC_PAAFuncSt = std::move(_x.ADC_PAAFuncSt);
		ADC_AVPActFuncind = std::move(_x.ADC_AVPActFuncind);
		ADC_PAADrvInteraction = std::move(_x.ADC_PAADrvInteraction);
		ADC_PAARemoteParkingMode = std::move(_x.ADC_PAARemoteParkingMode);
		ADC_PAARemoteParkingEnable = std::move(_x.ADC_PAARemoteParkingEnable);
		ADC_LongCtrlModeForBrkSys_B = std::move(_x.ADC_LongCtrlModeForBrkSys_B);
		ADC_LongCtrlTargetAx_B = std::move(_x.ADC_LongCtrlTargetAx_B);
		ADC_LongCtrlTargetAxReq_B = std::move(_x.ADC_LongCtrlTargetAxReq_B);
		ADC_LongCtrlTypReq_B = std::move(_x.ADC_LongCtrlTypReq_B);
		ADC_LongCtrlDecToStopReq_B = std::move(_x.ADC_LongCtrlDecToStopReq_B);
		ADC_LongctrlSecureReq_B = std::move(_x.ADC_LongctrlSecureReq_B);
		ADC_ActTrqReq_B = std::move(_x.ADC_ActTrqReq_B);
		ADC_ActTrqReqVD_B = std::move(_x.ADC_ActTrqReqVD_B);
		ADC_VLCSt_B = std::move(_x.ADC_VLCSt_B);
		ADC_ActTrqReqVD = std::move(_x.ADC_ActTrqReqVD);
		ADC_VLCSt = std::move(_x.ADC_VLCSt);
		ADC_ActTrqReq = std::move(_x.ADC_ActTrqReq);
		ADC_ADASLongCtrlFuncMode = std::move(_x.ADC_ADASLongCtrlFuncMode);
		ADC_LongCtrlAvailability = std::move(_x.ADC_LongCtrlAvailability);
		ADC_LongCtrlModeForBrkSys = std::move(_x.ADC_LongCtrlModeForBrkSys);
		ADC_LongCtrlTargetAxReq = std::move(_x.ADC_LongCtrlTargetAxReq);
		ADC_LongCtrlTypReq = std::move(_x.ADC_LongCtrlTypReq);
		ADC_LongCtrlDecToStopReq = std::move(_x.ADC_LongCtrlDecToStopReq);
		ADC_LongCtrlDriveOff = std::move(_x.ADC_LongCtrlDriveOff);
		ADC_LongctrlSecureReq = std::move(_x.ADC_LongctrlSecureReq);
		ADC_PAAGrarLvlReq = std::move(_x.ADC_PAAGrarLvlReq);
		ADC_PAAGrarLvlReqEnable = std::move(_x.ADC_PAAGrarLvlReqEnable);
	}
	BDCADC1& operator=(const BDCADC1 &_x){
		ADC_SBMAuthst = _x.ADC_SBMAuthst;
		ADC_PAAChallengeReceive = _x.ADC_PAAChallengeReceive;
		ADC_PAAChallenge1SBM = _x.ADC_PAAChallenge1SBM;
		ADC_PAAChallenge2SBM = _x.ADC_PAAChallenge2SBM;
		ADC_PAAChallenge1TEL = _x.ADC_PAAChallenge1TEL;
		ADC_PAAChallenge2TEL = _x.ADC_PAAChallenge2TEL;
		ADC_HPAStrtgEndgPointInfo = _x.ADC_HPAStrtgEndgPointInfo;
		ADC_HPALearningProcessInfo = _x.ADC_HPALearningProcessInfo;
		ADC_HPALearningFailedInfo = _x.ADC_HPALearningFailedInfo;
		ADC_HPAResRouteLeg = _x.ADC_HPAResRouteLeg;
		ADC_HPAUseActDis = _x.ADC_HPAUseActDis;
		ADC_HPAProcRat = _x.ADC_HPAProcRat;
		ADC_HPAUseTolTime = _x.ADC_HPAUseTolTime;
		ADC_SlotSelectFebk = _x.ADC_SlotSelectFebk;
		ADC_AVPParkSlotInfo = _x.ADC_AVPParkSlotInfo;
		ADC_SwitchStShow = _x.ADC_SwitchStShow;
		ADC_HPASwitchStShow = _x.ADC_HPASwitchStShow;
		ADC_AVPSwitchStShow = _x.ADC_AVPSwitchStShow;
		ADC_APAst = _x.ADC_APAst;
		ADC_AVPst = _x.ADC_AVPst;
		ADC_PAAFuncSt = _x.ADC_PAAFuncSt;
		ADC_AVPActFuncind = _x.ADC_AVPActFuncind;
		ADC_PAADrvInteraction = _x.ADC_PAADrvInteraction;
		ADC_PAARemoteParkingMode = _x.ADC_PAARemoteParkingMode;
		ADC_PAARemoteParkingEnable = _x.ADC_PAARemoteParkingEnable;
		ADC_LongCtrlModeForBrkSys_B = _x.ADC_LongCtrlModeForBrkSys_B;
		ADC_LongCtrlTargetAx_B = _x.ADC_LongCtrlTargetAx_B;
		ADC_LongCtrlTargetAxReq_B = _x.ADC_LongCtrlTargetAxReq_B;
		ADC_LongCtrlTypReq_B = _x.ADC_LongCtrlTypReq_B;
		ADC_LongCtrlDecToStopReq_B = _x.ADC_LongCtrlDecToStopReq_B;
		ADC_LongctrlSecureReq_B = _x.ADC_LongctrlSecureReq_B;
		ADC_ActTrqReq_B = _x.ADC_ActTrqReq_B;
		ADC_ActTrqReqVD_B = _x.ADC_ActTrqReqVD_B;
		ADC_VLCSt_B = _x.ADC_VLCSt_B;
		ADC_ActTrqReqVD = _x.ADC_ActTrqReqVD;
		ADC_VLCSt = _x.ADC_VLCSt;
		ADC_ActTrqReq = _x.ADC_ActTrqReq;
		ADC_ADASLongCtrlFuncMode = _x.ADC_ADASLongCtrlFuncMode;
		ADC_LongCtrlAvailability = _x.ADC_LongCtrlAvailability;
		ADC_LongCtrlModeForBrkSys = _x.ADC_LongCtrlModeForBrkSys;
		ADC_LongCtrlTargetAxReq = _x.ADC_LongCtrlTargetAxReq;
		ADC_LongCtrlTypReq = _x.ADC_LongCtrlTypReq;
		ADC_LongCtrlDecToStopReq = _x.ADC_LongCtrlDecToStopReq;
		ADC_LongCtrlDriveOff = _x.ADC_LongCtrlDriveOff;
		ADC_LongctrlSecureReq = _x.ADC_LongctrlSecureReq;
		ADC_PAAGrarLvlReq = _x.ADC_PAAGrarLvlReq;
		ADC_PAAGrarLvlReqEnable = _x.ADC_PAAGrarLvlReqEnable;
		return *this;
	}
	BDCADC1& operator=(BDCADC1 &&_x){
		ADC_SBMAuthst = std::move(_x.ADC_SBMAuthst);
		ADC_PAAChallengeReceive = std::move(_x.ADC_PAAChallengeReceive);
		ADC_PAAChallenge1SBM = std::move(_x.ADC_PAAChallenge1SBM);
		ADC_PAAChallenge2SBM = std::move(_x.ADC_PAAChallenge2SBM);
		ADC_PAAChallenge1TEL = std::move(_x.ADC_PAAChallenge1TEL);
		ADC_PAAChallenge2TEL = std::move(_x.ADC_PAAChallenge2TEL);
		ADC_HPAStrtgEndgPointInfo = std::move(_x.ADC_HPAStrtgEndgPointInfo);
		ADC_HPALearningProcessInfo = std::move(_x.ADC_HPALearningProcessInfo);
		ADC_HPALearningFailedInfo = std::move(_x.ADC_HPALearningFailedInfo);
		ADC_HPAResRouteLeg = std::move(_x.ADC_HPAResRouteLeg);
		ADC_HPAUseActDis = std::move(_x.ADC_HPAUseActDis);
		ADC_HPAProcRat = std::move(_x.ADC_HPAProcRat);
		ADC_HPAUseTolTime = std::move(_x.ADC_HPAUseTolTime);
		ADC_SlotSelectFebk = std::move(_x.ADC_SlotSelectFebk);
		ADC_AVPParkSlotInfo = std::move(_x.ADC_AVPParkSlotInfo);
		ADC_SwitchStShow = std::move(_x.ADC_SwitchStShow);
		ADC_HPASwitchStShow = std::move(_x.ADC_HPASwitchStShow);
		ADC_AVPSwitchStShow = std::move(_x.ADC_AVPSwitchStShow);
		ADC_APAst = std::move(_x.ADC_APAst);
		ADC_AVPst = std::move(_x.ADC_AVPst);
		ADC_PAAFuncSt = std::move(_x.ADC_PAAFuncSt);
		ADC_AVPActFuncind = std::move(_x.ADC_AVPActFuncind);
		ADC_PAADrvInteraction = std::move(_x.ADC_PAADrvInteraction);
		ADC_PAARemoteParkingMode = std::move(_x.ADC_PAARemoteParkingMode);
		ADC_PAARemoteParkingEnable = std::move(_x.ADC_PAARemoteParkingEnable);
		ADC_LongCtrlModeForBrkSys_B = std::move(_x.ADC_LongCtrlModeForBrkSys_B);
		ADC_LongCtrlTargetAx_B = std::move(_x.ADC_LongCtrlTargetAx_B);
		ADC_LongCtrlTargetAxReq_B = std::move(_x.ADC_LongCtrlTargetAxReq_B);
		ADC_LongCtrlTypReq_B = std::move(_x.ADC_LongCtrlTypReq_B);
		ADC_LongCtrlDecToStopReq_B = std::move(_x.ADC_LongCtrlDecToStopReq_B);
		ADC_LongctrlSecureReq_B = std::move(_x.ADC_LongctrlSecureReq_B);
		ADC_ActTrqReq_B = std::move(_x.ADC_ActTrqReq_B);
		ADC_ActTrqReqVD_B = std::move(_x.ADC_ActTrqReqVD_B);
		ADC_VLCSt_B = std::move(_x.ADC_VLCSt_B);
		ADC_ActTrqReqVD = std::move(_x.ADC_ActTrqReqVD);
		ADC_VLCSt = std::move(_x.ADC_VLCSt);
		ADC_ActTrqReq = std::move(_x.ADC_ActTrqReq);
		ADC_ADASLongCtrlFuncMode = std::move(_x.ADC_ADASLongCtrlFuncMode);
		ADC_LongCtrlAvailability = std::move(_x.ADC_LongCtrlAvailability);
		ADC_LongCtrlModeForBrkSys = std::move(_x.ADC_LongCtrlModeForBrkSys);
		ADC_LongCtrlTargetAxReq = std::move(_x.ADC_LongCtrlTargetAxReq);
		ADC_LongCtrlTypReq = std::move(_x.ADC_LongCtrlTypReq);
		ADC_LongCtrlDecToStopReq = std::move(_x.ADC_LongCtrlDecToStopReq);
		ADC_LongCtrlDriveOff = std::move(_x.ADC_LongCtrlDriveOff);
		ADC_LongctrlSecureReq = std::move(_x.ADC_LongctrlSecureReq);
		ADC_PAAGrarLvlReq = std::move(_x.ADC_PAAGrarLvlReq);
		ADC_PAAGrarLvlReqEnable = std::move(_x.ADC_PAAGrarLvlReqEnable);
		return *this;
	}
*/

	using IsEnumerableTag = void;
	template<typename F>
	void enumerate(F& fun) {
		fun(ADC_SBMAuthst);
		fun(ADC_PAAChallengeReceive);
		fun(ADC_PAAChallenge1SBM);
		fun(ADC_PAAChallenge2SBM);
		fun(ADC_PAAChallenge1TEL);
		fun(ADC_PAAChallenge2TEL);
		fun(ADC_HPAStrtgEndgPointInfo);
		fun(ADC_HPALearningProcessInfo);
		fun(ADC_HPALearningFailedInfo);
		fun(ADC_HPAResRouteLeg);
		fun(ADC_HPAUseActDis);
		fun(ADC_HPAProcRat);
		fun(ADC_HPAUseTolTime);
		fun(ADC_SlotSelectFebk);
		fun(ADC_AVPParkSlotInfo);
		fun(ADC_SwitchStShow);
		fun(ADC_HPASwitchStShow);
		fun(ADC_AVPSwitchStShow);
		fun(ADC_APAst);
		fun(ADC_AVPst);
		fun(ADC_PAAFuncSt);
		fun(ADC_AVPActFuncind);
		fun(ADC_PAADrvInteraction);
		fun(ADC_PAARemoteParkingMode);
		fun(ADC_PAARemoteParkingEnable);
		fun(ADC_LongCtrlModeForBrkSys_B);
		fun(ADC_LongCtrlTargetAx_B);
		fun(ADC_LongCtrlTargetAxReq_B);
		fun(ADC_LongCtrlTypReq_B);
		fun(ADC_LongCtrlDecToStopReq_B);
		fun(ADC_LongctrlSecureReq_B);
		fun(ADC_ActTrqReq_B);
		fun(ADC_ActTrqReqVD_B);
		fun(ADC_VLCSt_B);
		fun(ADC_ActTrqReqVD);
		fun(ADC_VLCSt);
		fun(ADC_ActTrqReq);
		fun(ADC_ADASLongCtrlFuncMode);
		fun(ADC_LongCtrlAvailability);
		fun(ADC_LongCtrlModeForBrkSys);
		fun(ADC_LongCtrlTargetAxReq);
		fun(ADC_LongCtrlTypReq);
		fun(ADC_LongCtrlDecToStopReq);
		fun(ADC_LongCtrlDriveOff);
		fun(ADC_LongctrlSecureReq);
		fun(ADC_PAAGrarLvlReq);
		fun(ADC_PAAGrarLvlReqEnable);
	}

	template<typename F>
	void GetSize(F& fun) const{
		fun(ADC_SBMAuthst);
		fun(ADC_PAAChallengeReceive);
		fun(ADC_PAAChallenge1SBM);
		fun(ADC_PAAChallenge2SBM);
		fun(ADC_PAAChallenge1TEL);
		fun(ADC_PAAChallenge2TEL);
		fun(ADC_HPAStrtgEndgPointInfo);
		fun(ADC_HPALearningProcessInfo);
		fun(ADC_HPALearningFailedInfo);
		fun(ADC_HPAResRouteLeg);
		fun(ADC_HPAUseActDis);
		fun(ADC_HPAProcRat);
		fun(ADC_HPAUseTolTime);
		fun(ADC_SlotSelectFebk);
		fun(ADC_AVPParkSlotInfo);
		fun(ADC_SwitchStShow);
		fun(ADC_HPASwitchStShow);
		fun(ADC_AVPSwitchStShow);
		fun(ADC_APAst);
		fun(ADC_AVPst);
		fun(ADC_PAAFuncSt);
		fun(ADC_AVPActFuncind);
		fun(ADC_PAADrvInteraction);
		fun(ADC_PAARemoteParkingMode);
		fun(ADC_PAARemoteParkingEnable);
		fun(ADC_LongCtrlModeForBrkSys_B);
		fun(ADC_LongCtrlTargetAx_B);
		fun(ADC_LongCtrlTargetAxReq_B);
		fun(ADC_LongCtrlTypReq_B);
		fun(ADC_LongCtrlDecToStopReq_B);
		fun(ADC_LongctrlSecureReq_B);
		fun(ADC_ActTrqReq_B);
		fun(ADC_ActTrqReqVD_B);
		fun(ADC_VLCSt_B);
		fun(ADC_ActTrqReqVD);
		fun(ADC_VLCSt);
		fun(ADC_ActTrqReq);
		fun(ADC_ADASLongCtrlFuncMode);
		fun(ADC_LongCtrlAvailability);
		fun(ADC_LongCtrlModeForBrkSys);
		fun(ADC_LongCtrlTargetAxReq);
		fun(ADC_LongCtrlTypReq);
		fun(ADC_LongCtrlDecToStopReq);
		fun(ADC_LongCtrlDriveOff);
		fun(ADC_LongctrlSecureReq);
		fun(ADC_PAAGrarLvlReq);
		fun(ADC_PAAGrarLvlReqEnable);
	}
	template<typename F>
	void serialize(F& fun) const{
		fun << (ADC_SBMAuthst);
		fun << (ADC_PAAChallengeReceive);
		fun << (ADC_PAAChallenge1SBM);
		fun << (ADC_PAAChallenge2SBM);
		fun << (ADC_PAAChallenge1TEL);
		fun << (ADC_PAAChallenge2TEL);
		fun << (ADC_HPAStrtgEndgPointInfo);
		fun << (ADC_HPALearningProcessInfo);
		fun << (ADC_HPALearningFailedInfo);
		fun << (ADC_HPAResRouteLeg);
		fun << (ADC_HPAUseActDis);
		fun << (ADC_HPAProcRat);
		fun << (ADC_HPAUseTolTime);
		fun << (ADC_SlotSelectFebk);
		fun << (ADC_AVPParkSlotInfo);
		fun << (ADC_SwitchStShow);
		fun << (ADC_HPASwitchStShow);
		fun << (ADC_AVPSwitchStShow);
		fun << (ADC_APAst);
		fun << (ADC_AVPst);
		fun << (ADC_PAAFuncSt);
		fun << (ADC_AVPActFuncind);
		fun << (ADC_PAADrvInteraction);
		fun << (ADC_PAARemoteParkingMode);
		fun << (ADC_PAARemoteParkingEnable);
		fun << (ADC_LongCtrlModeForBrkSys_B);
		fun << (ADC_LongCtrlTargetAx_B);
		fun << (ADC_LongCtrlTargetAxReq_B);
		fun << (ADC_LongCtrlTypReq_B);
		fun << (ADC_LongCtrlDecToStopReq_B);
		fun << (ADC_LongctrlSecureReq_B);
		fun << (ADC_ActTrqReq_B);
		fun << (ADC_ActTrqReqVD_B);
		fun << (ADC_VLCSt_B);
		fun << (ADC_ActTrqReqVD);
		fun << (ADC_VLCSt);
		fun << (ADC_ActTrqReq);
		fun << (ADC_ADASLongCtrlFuncMode);
		fun << (ADC_LongCtrlAvailability);
		fun << (ADC_LongCtrlModeForBrkSys);
		fun << (ADC_LongCtrlTargetAxReq);
		fun << (ADC_LongCtrlTypReq);
		fun << (ADC_LongCtrlDecToStopReq);
		fun << (ADC_LongCtrlDriveOff);
		fun << (ADC_LongctrlSecureReq);
		fun << (ADC_PAAGrarLvlReq);
		fun << (ADC_PAAGrarLvlReqEnable);
	}
	template<typename F>
	void deserialize(F& fun){
		fun >> (ADC_SBMAuthst);
		fun >> (ADC_PAAChallengeReceive);
		fun >> (ADC_PAAChallenge1SBM);
		fun >> (ADC_PAAChallenge2SBM);
		fun >> (ADC_PAAChallenge1TEL);
		fun >> (ADC_PAAChallenge2TEL);
		fun >> (ADC_HPAStrtgEndgPointInfo);
		fun >> (ADC_HPALearningProcessInfo);
		fun >> (ADC_HPALearningFailedInfo);
		fun >> (ADC_HPAResRouteLeg);
		fun >> (ADC_HPAUseActDis);
		fun >> (ADC_HPAProcRat);
		fun >> (ADC_HPAUseTolTime);
		fun >> (ADC_SlotSelectFebk);
		fun >> (ADC_AVPParkSlotInfo);
		fun >> (ADC_SwitchStShow);
		fun >> (ADC_HPASwitchStShow);
		fun >> (ADC_AVPSwitchStShow);
		fun >> (ADC_APAst);
		fun >> (ADC_AVPst);
		fun >> (ADC_PAAFuncSt);
		fun >> (ADC_AVPActFuncind);
		fun >> (ADC_PAADrvInteraction);
		fun >> (ADC_PAARemoteParkingMode);
		fun >> (ADC_PAARemoteParkingEnable);
		fun >> (ADC_LongCtrlModeForBrkSys_B);
		fun >> (ADC_LongCtrlTargetAx_B);
		fun >> (ADC_LongCtrlTargetAxReq_B);
		fun >> (ADC_LongCtrlTypReq_B);
		fun >> (ADC_LongCtrlDecToStopReq_B);
		fun >> (ADC_LongctrlSecureReq_B);
		fun >> (ADC_ActTrqReq_B);
		fun >> (ADC_ActTrqReqVD_B);
		fun >> (ADC_VLCSt_B);
		fun >> (ADC_ActTrqReqVD);
		fun >> (ADC_VLCSt);
		fun >> (ADC_ActTrqReq);
		fun >> (ADC_ADASLongCtrlFuncMode);
		fun >> (ADC_LongCtrlAvailability);
		fun >> (ADC_LongCtrlModeForBrkSys);
		fun >> (ADC_LongCtrlTargetAxReq);
		fun >> (ADC_LongCtrlTypReq);
		fun >> (ADC_LongCtrlDecToStopReq);
		fun >> (ADC_LongCtrlDriveOff);
		fun >> (ADC_LongctrlSecureReq);
		fun >> (ADC_PAAGrarLvlReq);
		fun >> (ADC_PAAGrarLvlReqEnable);
	}
};

#endif //____BDCADC1_H__
