#ifndef ____BDCIPDS4_H__
#define ____BDCIPDS4_H__


#include "cstdint"






struct BDCIPDS4 {
public:
	std::uint64_t IPDS_ZCUFVoltLvAct;
	std::uint64_t IPDS_FWiperHCurrent;
	std::uint64_t IPDS_ZCULVoltLvAct;
	std::uint64_t IPDS_DSeatVibCurrent;
	std::uint64_t IPDS_DFanSeatCurrent;
	std::uint64_t IPDS_DHeatCurrent;
	std::uint64_t IPDS_FLWindowCurrent;
	std::uint64_t IPDS_IALCurrent;
	std::uint64_t IPDS_LSPLampCurrent;
	std::uint64_t IPDS_RoomLightCurrent;
	std::uint64_t IPDS_SWHCurrent;
	std::uint64_t IPDS_FLRVMHeatCurrent;
	std::uint64_t IPDS_FLRVMCurrent;
	std::uint64_t IPDS_DSMCurrent;
	std::uint64_t IPDS_ZCURVoltLvAct;
	std::uint64_t IPDS_PHeatCurrent;
	std::uint64_t IPDS_PFRSeatCurrent;
	std::uint64_t IPDS_PBackrestCurrent;
	std::uint64_t IPDS_PLiftSeatCurrent;
	std::uint64_t IPDS_PLiftCushionCurrent;
	std::uint64_t IPDS_PRootRestCurrent;
	std::uint64_t IPDS_PFRCushionCurrent;
	std::uint64_t IPDS_PFanSeatCurrent;
	std::uint64_t IPDS_RSPLampCurrent;
	std::uint64_t IPDS_RSPCurrent;
	std::uint64_t IPDS_FRRVMHeatCurrent;
	std::uint64_t IPDS_FRRVMCurrent;
	std::uint64_t IPDS_FRWindowCurrent;
	std::uint64_t IPDS_ZCUTVoltLvAct;
	std::uint64_t IPDS_RLWindowCurrent;
	std::uint64_t IPDS_RRWindowCurrent;
	std::uint64_t IPDS_RRTurnL1Current;
	std::uint64_t IPDS_RRTurnL2Current;
	std::uint64_t IPDS_RFogLCurrent;
	std::uint64_t IPDS_RLPosLCurrent;
	std::uint64_t IPDS_RRPosL1Current;
	std::uint64_t IPDS_RRPosL2Current;
	std::uint64_t IPDS_RLPBrakeLCurrent;
	std::uint64_t IPDS_RRPBrakeLCurrent;
	std::uint64_t IPDS_LicenseCurrent;
	std::uint64_t IPDS_CHMSLCurrent;
	std::uint64_t IPDS_ReverseLCurrent;
	std::uint64_t IPDS_LSpindle1Current;
	std::uint64_t IPDS_LSpindle2Current;
	std::uint64_t IPDS_LCinchCurrent;
	std::uint64_t IPDS_RWiperCurrent;
	std::uint64_t IPDS_REPBCurrent;
/*
	BDCIPDS4() {}
	~BDCIPDS4() {}
	BDCIPDS4(const std::uint64_t _IPDS_ZCUFVoltLvAct,const std::uint64_t _IPDS_FWiperHCurrent,const std::uint64_t _IPDS_ZCULVoltLvAct,const std::uint64_t _IPDS_DSeatVibCurrent,const std::uint64_t _IPDS_DFanSeatCurrent,const std::uint64_t _IPDS_DHeatCurrent,const std::uint64_t _IPDS_FLWindowCurrent,const std::uint64_t _IPDS_IALCurrent,const std::uint64_t _IPDS_LSPLampCurrent,const std::uint64_t _IPDS_RoomLightCurrent,const std::uint64_t _IPDS_SWHCurrent,const std::uint64_t _IPDS_FLRVMHeatCurrent,const std::uint64_t _IPDS_FLRVMCurrent,const std::uint64_t _IPDS_DSMCurrent,const std::uint64_t _IPDS_ZCURVoltLvAct,const std::uint64_t _IPDS_PHeatCurrent,const std::uint64_t _IPDS_PFRSeatCurrent,const std::uint64_t _IPDS_PBackrestCurrent,const std::uint64_t _IPDS_PLiftSeatCurrent,const std::uint64_t _IPDS_PLiftCushionCurrent,const std::uint64_t _IPDS_PRootRestCurrent,const std::uint64_t _IPDS_PFRCushionCurrent,const std::uint64_t _IPDS_PFanSeatCurrent,const std::uint64_t _IPDS_RSPLampCurrent,const std::uint64_t _IPDS_RSPCurrent,const std::uint64_t _IPDS_FRRVMHeatCurrent,const std::uint64_t _IPDS_FRRVMCurrent,const std::uint64_t _IPDS_FRWindowCurrent,const std::uint64_t _IPDS_ZCUTVoltLvAct,const std::uint64_t _IPDS_RLWindowCurrent,const std::uint64_t _IPDS_RRWindowCurrent,const std::uint64_t _IPDS_RRTurnL1Current,const std::uint64_t _IPDS_RRTurnL2Current,const std::uint64_t _IPDS_RFogLCurrent,const std::uint64_t _IPDS_RLPosLCurrent,const std::uint64_t _IPDS_RRPosL1Current,const std::uint64_t _IPDS_RRPosL2Current,const std::uint64_t _IPDS_RLPBrakeLCurrent,const std::uint64_t _IPDS_RRPBrakeLCurrent,const std::uint64_t _IPDS_LicenseCurrent,const std::uint64_t _IPDS_CHMSLCurrent,const std::uint64_t _IPDS_ReverseLCurrent,const std::uint64_t _IPDS_LSpindle1Current,const std::uint64_t _IPDS_LSpindle2Current,const std::uint64_t _IPDS_LCinchCurrent,const std::uint64_t _IPDS_RWiperCurrent,const std::uint64_t _IPDS_REPBCurrent):IPDS_ZCUFVoltLvAct(_IPDS_ZCUFVoltLvAct),IPDS_FWiperHCurrent(_IPDS_FWiperHCurrent),IPDS_ZCULVoltLvAct(_IPDS_ZCULVoltLvAct),IPDS_DSeatVibCurrent(_IPDS_DSeatVibCurrent),IPDS_DFanSeatCurrent(_IPDS_DFanSeatCurrent),IPDS_DHeatCurrent(_IPDS_DHeatCurrent),IPDS_FLWindowCurrent(_IPDS_FLWindowCurrent),IPDS_IALCurrent(_IPDS_IALCurrent),IPDS_LSPLampCurrent(_IPDS_LSPLampCurrent),IPDS_RoomLightCurrent(_IPDS_RoomLightCurrent),IPDS_SWHCurrent(_IPDS_SWHCurrent),IPDS_FLRVMHeatCurrent(_IPDS_FLRVMHeatCurrent),IPDS_FLRVMCurrent(_IPDS_FLRVMCurrent),IPDS_DSMCurrent(_IPDS_DSMCurrent),IPDS_ZCURVoltLvAct(_IPDS_ZCURVoltLvAct),IPDS_PHeatCurrent(_IPDS_PHeatCurrent),IPDS_PFRSeatCurrent(_IPDS_PFRSeatCurrent),IPDS_PBackrestCurrent(_IPDS_PBackrestCurrent),IPDS_PLiftSeatCurrent(_IPDS_PLiftSeatCurrent),IPDS_PLiftCushionCurrent(_IPDS_PLiftCushionCurrent),IPDS_PRootRestCurrent(_IPDS_PRootRestCurrent),IPDS_PFRCushionCurrent(_IPDS_PFRCushionCurrent),IPDS_PFanSeatCurrent(_IPDS_PFanSeatCurrent),IPDS_RSPLampCurrent(_IPDS_RSPLampCurrent),IPDS_RSPCurrent(_IPDS_RSPCurrent),IPDS_FRRVMHeatCurrent(_IPDS_FRRVMHeatCurrent),IPDS_FRRVMCurrent(_IPDS_FRRVMCurrent),IPDS_FRWindowCurrent(_IPDS_FRWindowCurrent),IPDS_ZCUTVoltLvAct(_IPDS_ZCUTVoltLvAct),IPDS_RLWindowCurrent(_IPDS_RLWindowCurrent),IPDS_RRWindowCurrent(_IPDS_RRWindowCurrent),IPDS_RRTurnL1Current(_IPDS_RRTurnL1Current),IPDS_RRTurnL2Current(_IPDS_RRTurnL2Current),IPDS_RFogLCurrent(_IPDS_RFogLCurrent),IPDS_RLPosLCurrent(_IPDS_RLPosLCurrent),IPDS_RRPosL1Current(_IPDS_RRPosL1Current),IPDS_RRPosL2Current(_IPDS_RRPosL2Current),IPDS_RLPBrakeLCurrent(_IPDS_RLPBrakeLCurrent),IPDS_RRPBrakeLCurrent(_IPDS_RRPBrakeLCurrent),IPDS_LicenseCurrent(_IPDS_LicenseCurrent),IPDS_CHMSLCurrent(_IPDS_CHMSLCurrent),IPDS_ReverseLCurrent(_IPDS_ReverseLCurrent),IPDS_LSpindle1Current(_IPDS_LSpindle1Current),IPDS_LSpindle2Current(_IPDS_LSpindle2Current),IPDS_LCinchCurrent(_IPDS_LCinchCurrent),IPDS_RWiperCurrent(_IPDS_RWiperCurrent),IPDS_REPBCurrent(_IPDS_REPBCurrent) {}
	BDCIPDS4(const BDCIPDS4 &_x){
		IPDS_ZCUFVoltLvAct = _x.IPDS_ZCUFVoltLvAct;
		IPDS_FWiperHCurrent = _x.IPDS_FWiperHCurrent;
		IPDS_ZCULVoltLvAct = _x.IPDS_ZCULVoltLvAct;
		IPDS_DSeatVibCurrent = _x.IPDS_DSeatVibCurrent;
		IPDS_DFanSeatCurrent = _x.IPDS_DFanSeatCurrent;
		IPDS_DHeatCurrent = _x.IPDS_DHeatCurrent;
		IPDS_FLWindowCurrent = _x.IPDS_FLWindowCurrent;
		IPDS_IALCurrent = _x.IPDS_IALCurrent;
		IPDS_LSPLampCurrent = _x.IPDS_LSPLampCurrent;
		IPDS_RoomLightCurrent = _x.IPDS_RoomLightCurrent;
		IPDS_SWHCurrent = _x.IPDS_SWHCurrent;
		IPDS_FLRVMHeatCurrent = _x.IPDS_FLRVMHeatCurrent;
		IPDS_FLRVMCurrent = _x.IPDS_FLRVMCurrent;
		IPDS_DSMCurrent = _x.IPDS_DSMCurrent;
		IPDS_ZCURVoltLvAct = _x.IPDS_ZCURVoltLvAct;
		IPDS_PHeatCurrent = _x.IPDS_PHeatCurrent;
		IPDS_PFRSeatCurrent = _x.IPDS_PFRSeatCurrent;
		IPDS_PBackrestCurrent = _x.IPDS_PBackrestCurrent;
		IPDS_PLiftSeatCurrent = _x.IPDS_PLiftSeatCurrent;
		IPDS_PLiftCushionCurrent = _x.IPDS_PLiftCushionCurrent;
		IPDS_PRootRestCurrent = _x.IPDS_PRootRestCurrent;
		IPDS_PFRCushionCurrent = _x.IPDS_PFRCushionCurrent;
		IPDS_PFanSeatCurrent = _x.IPDS_PFanSeatCurrent;
		IPDS_RSPLampCurrent = _x.IPDS_RSPLampCurrent;
		IPDS_RSPCurrent = _x.IPDS_RSPCurrent;
		IPDS_FRRVMHeatCurrent = _x.IPDS_FRRVMHeatCurrent;
		IPDS_FRRVMCurrent = _x.IPDS_FRRVMCurrent;
		IPDS_FRWindowCurrent = _x.IPDS_FRWindowCurrent;
		IPDS_ZCUTVoltLvAct = _x.IPDS_ZCUTVoltLvAct;
		IPDS_RLWindowCurrent = _x.IPDS_RLWindowCurrent;
		IPDS_RRWindowCurrent = _x.IPDS_RRWindowCurrent;
		IPDS_RRTurnL1Current = _x.IPDS_RRTurnL1Current;
		IPDS_RRTurnL2Current = _x.IPDS_RRTurnL2Current;
		IPDS_RFogLCurrent = _x.IPDS_RFogLCurrent;
		IPDS_RLPosLCurrent = _x.IPDS_RLPosLCurrent;
		IPDS_RRPosL1Current = _x.IPDS_RRPosL1Current;
		IPDS_RRPosL2Current = _x.IPDS_RRPosL2Current;
		IPDS_RLPBrakeLCurrent = _x.IPDS_RLPBrakeLCurrent;
		IPDS_RRPBrakeLCurrent = _x.IPDS_RRPBrakeLCurrent;
		IPDS_LicenseCurrent = _x.IPDS_LicenseCurrent;
		IPDS_CHMSLCurrent = _x.IPDS_CHMSLCurrent;
		IPDS_ReverseLCurrent = _x.IPDS_ReverseLCurrent;
		IPDS_LSpindle1Current = _x.IPDS_LSpindle1Current;
		IPDS_LSpindle2Current = _x.IPDS_LSpindle2Current;
		IPDS_LCinchCurrent = _x.IPDS_LCinchCurrent;
		IPDS_RWiperCurrent = _x.IPDS_RWiperCurrent;
		IPDS_REPBCurrent = _x.IPDS_REPBCurrent;
	}
	BDCIPDS4(BDCIPDS4 &&_x){
		IPDS_ZCUFVoltLvAct = std::move(_x.IPDS_ZCUFVoltLvAct);
		IPDS_FWiperHCurrent = std::move(_x.IPDS_FWiperHCurrent);
		IPDS_ZCULVoltLvAct = std::move(_x.IPDS_ZCULVoltLvAct);
		IPDS_DSeatVibCurrent = std::move(_x.IPDS_DSeatVibCurrent);
		IPDS_DFanSeatCurrent = std::move(_x.IPDS_DFanSeatCurrent);
		IPDS_DHeatCurrent = std::move(_x.IPDS_DHeatCurrent);
		IPDS_FLWindowCurrent = std::move(_x.IPDS_FLWindowCurrent);
		IPDS_IALCurrent = std::move(_x.IPDS_IALCurrent);
		IPDS_LSPLampCurrent = std::move(_x.IPDS_LSPLampCurrent);
		IPDS_RoomLightCurrent = std::move(_x.IPDS_RoomLightCurrent);
		IPDS_SWHCurrent = std::move(_x.IPDS_SWHCurrent);
		IPDS_FLRVMHeatCurrent = std::move(_x.IPDS_FLRVMHeatCurrent);
		IPDS_FLRVMCurrent = std::move(_x.IPDS_FLRVMCurrent);
		IPDS_DSMCurrent = std::move(_x.IPDS_DSMCurrent);
		IPDS_ZCURVoltLvAct = std::move(_x.IPDS_ZCURVoltLvAct);
		IPDS_PHeatCurrent = std::move(_x.IPDS_PHeatCurrent);
		IPDS_PFRSeatCurrent = std::move(_x.IPDS_PFRSeatCurrent);
		IPDS_PBackrestCurrent = std::move(_x.IPDS_PBackrestCurrent);
		IPDS_PLiftSeatCurrent = std::move(_x.IPDS_PLiftSeatCurrent);
		IPDS_PLiftCushionCurrent = std::move(_x.IPDS_PLiftCushionCurrent);
		IPDS_PRootRestCurrent = std::move(_x.IPDS_PRootRestCurrent);
		IPDS_PFRCushionCurrent = std::move(_x.IPDS_PFRCushionCurrent);
		IPDS_PFanSeatCurrent = std::move(_x.IPDS_PFanSeatCurrent);
		IPDS_RSPLampCurrent = std::move(_x.IPDS_RSPLampCurrent);
		IPDS_RSPCurrent = std::move(_x.IPDS_RSPCurrent);
		IPDS_FRRVMHeatCurrent = std::move(_x.IPDS_FRRVMHeatCurrent);
		IPDS_FRRVMCurrent = std::move(_x.IPDS_FRRVMCurrent);
		IPDS_FRWindowCurrent = std::move(_x.IPDS_FRWindowCurrent);
		IPDS_ZCUTVoltLvAct = std::move(_x.IPDS_ZCUTVoltLvAct);
		IPDS_RLWindowCurrent = std::move(_x.IPDS_RLWindowCurrent);
		IPDS_RRWindowCurrent = std::move(_x.IPDS_RRWindowCurrent);
		IPDS_RRTurnL1Current = std::move(_x.IPDS_RRTurnL1Current);
		IPDS_RRTurnL2Current = std::move(_x.IPDS_RRTurnL2Current);
		IPDS_RFogLCurrent = std::move(_x.IPDS_RFogLCurrent);
		IPDS_RLPosLCurrent = std::move(_x.IPDS_RLPosLCurrent);
		IPDS_RRPosL1Current = std::move(_x.IPDS_RRPosL1Current);
		IPDS_RRPosL2Current = std::move(_x.IPDS_RRPosL2Current);
		IPDS_RLPBrakeLCurrent = std::move(_x.IPDS_RLPBrakeLCurrent);
		IPDS_RRPBrakeLCurrent = std::move(_x.IPDS_RRPBrakeLCurrent);
		IPDS_LicenseCurrent = std::move(_x.IPDS_LicenseCurrent);
		IPDS_CHMSLCurrent = std::move(_x.IPDS_CHMSLCurrent);
		IPDS_ReverseLCurrent = std::move(_x.IPDS_ReverseLCurrent);
		IPDS_LSpindle1Current = std::move(_x.IPDS_LSpindle1Current);
		IPDS_LSpindle2Current = std::move(_x.IPDS_LSpindle2Current);
		IPDS_LCinchCurrent = std::move(_x.IPDS_LCinchCurrent);
		IPDS_RWiperCurrent = std::move(_x.IPDS_RWiperCurrent);
		IPDS_REPBCurrent = std::move(_x.IPDS_REPBCurrent);
	}
	BDCIPDS4& operator=(const BDCIPDS4 &_x){
		IPDS_ZCUFVoltLvAct = _x.IPDS_ZCUFVoltLvAct;
		IPDS_FWiperHCurrent = _x.IPDS_FWiperHCurrent;
		IPDS_ZCULVoltLvAct = _x.IPDS_ZCULVoltLvAct;
		IPDS_DSeatVibCurrent = _x.IPDS_DSeatVibCurrent;
		IPDS_DFanSeatCurrent = _x.IPDS_DFanSeatCurrent;
		IPDS_DHeatCurrent = _x.IPDS_DHeatCurrent;
		IPDS_FLWindowCurrent = _x.IPDS_FLWindowCurrent;
		IPDS_IALCurrent = _x.IPDS_IALCurrent;
		IPDS_LSPLampCurrent = _x.IPDS_LSPLampCurrent;
		IPDS_RoomLightCurrent = _x.IPDS_RoomLightCurrent;
		IPDS_SWHCurrent = _x.IPDS_SWHCurrent;
		IPDS_FLRVMHeatCurrent = _x.IPDS_FLRVMHeatCurrent;
		IPDS_FLRVMCurrent = _x.IPDS_FLRVMCurrent;
		IPDS_DSMCurrent = _x.IPDS_DSMCurrent;
		IPDS_ZCURVoltLvAct = _x.IPDS_ZCURVoltLvAct;
		IPDS_PHeatCurrent = _x.IPDS_PHeatCurrent;
		IPDS_PFRSeatCurrent = _x.IPDS_PFRSeatCurrent;
		IPDS_PBackrestCurrent = _x.IPDS_PBackrestCurrent;
		IPDS_PLiftSeatCurrent = _x.IPDS_PLiftSeatCurrent;
		IPDS_PLiftCushionCurrent = _x.IPDS_PLiftCushionCurrent;
		IPDS_PRootRestCurrent = _x.IPDS_PRootRestCurrent;
		IPDS_PFRCushionCurrent = _x.IPDS_PFRCushionCurrent;
		IPDS_PFanSeatCurrent = _x.IPDS_PFanSeatCurrent;
		IPDS_RSPLampCurrent = _x.IPDS_RSPLampCurrent;
		IPDS_RSPCurrent = _x.IPDS_RSPCurrent;
		IPDS_FRRVMHeatCurrent = _x.IPDS_FRRVMHeatCurrent;
		IPDS_FRRVMCurrent = _x.IPDS_FRRVMCurrent;
		IPDS_FRWindowCurrent = _x.IPDS_FRWindowCurrent;
		IPDS_ZCUTVoltLvAct = _x.IPDS_ZCUTVoltLvAct;
		IPDS_RLWindowCurrent = _x.IPDS_RLWindowCurrent;
		IPDS_RRWindowCurrent = _x.IPDS_RRWindowCurrent;
		IPDS_RRTurnL1Current = _x.IPDS_RRTurnL1Current;
		IPDS_RRTurnL2Current = _x.IPDS_RRTurnL2Current;
		IPDS_RFogLCurrent = _x.IPDS_RFogLCurrent;
		IPDS_RLPosLCurrent = _x.IPDS_RLPosLCurrent;
		IPDS_RRPosL1Current = _x.IPDS_RRPosL1Current;
		IPDS_RRPosL2Current = _x.IPDS_RRPosL2Current;
		IPDS_RLPBrakeLCurrent = _x.IPDS_RLPBrakeLCurrent;
		IPDS_RRPBrakeLCurrent = _x.IPDS_RRPBrakeLCurrent;
		IPDS_LicenseCurrent = _x.IPDS_LicenseCurrent;
		IPDS_CHMSLCurrent = _x.IPDS_CHMSLCurrent;
		IPDS_ReverseLCurrent = _x.IPDS_ReverseLCurrent;
		IPDS_LSpindle1Current = _x.IPDS_LSpindle1Current;
		IPDS_LSpindle2Current = _x.IPDS_LSpindle2Current;
		IPDS_LCinchCurrent = _x.IPDS_LCinchCurrent;
		IPDS_RWiperCurrent = _x.IPDS_RWiperCurrent;
		IPDS_REPBCurrent = _x.IPDS_REPBCurrent;
		return *this;
	}
	BDCIPDS4& operator=(BDCIPDS4 &&_x){
		IPDS_ZCUFVoltLvAct = std::move(_x.IPDS_ZCUFVoltLvAct);
		IPDS_FWiperHCurrent = std::move(_x.IPDS_FWiperHCurrent);
		IPDS_ZCULVoltLvAct = std::move(_x.IPDS_ZCULVoltLvAct);
		IPDS_DSeatVibCurrent = std::move(_x.IPDS_DSeatVibCurrent);
		IPDS_DFanSeatCurrent = std::move(_x.IPDS_DFanSeatCurrent);
		IPDS_DHeatCurrent = std::move(_x.IPDS_DHeatCurrent);
		IPDS_FLWindowCurrent = std::move(_x.IPDS_FLWindowCurrent);
		IPDS_IALCurrent = std::move(_x.IPDS_IALCurrent);
		IPDS_LSPLampCurrent = std::move(_x.IPDS_LSPLampCurrent);
		IPDS_RoomLightCurrent = std::move(_x.IPDS_RoomLightCurrent);
		IPDS_SWHCurrent = std::move(_x.IPDS_SWHCurrent);
		IPDS_FLRVMHeatCurrent = std::move(_x.IPDS_FLRVMHeatCurrent);
		IPDS_FLRVMCurrent = std::move(_x.IPDS_FLRVMCurrent);
		IPDS_DSMCurrent = std::move(_x.IPDS_DSMCurrent);
		IPDS_ZCURVoltLvAct = std::move(_x.IPDS_ZCURVoltLvAct);
		IPDS_PHeatCurrent = std::move(_x.IPDS_PHeatCurrent);
		IPDS_PFRSeatCurrent = std::move(_x.IPDS_PFRSeatCurrent);
		IPDS_PBackrestCurrent = std::move(_x.IPDS_PBackrestCurrent);
		IPDS_PLiftSeatCurrent = std::move(_x.IPDS_PLiftSeatCurrent);
		IPDS_PLiftCushionCurrent = std::move(_x.IPDS_PLiftCushionCurrent);
		IPDS_PRootRestCurrent = std::move(_x.IPDS_PRootRestCurrent);
		IPDS_PFRCushionCurrent = std::move(_x.IPDS_PFRCushionCurrent);
		IPDS_PFanSeatCurrent = std::move(_x.IPDS_PFanSeatCurrent);
		IPDS_RSPLampCurrent = std::move(_x.IPDS_RSPLampCurrent);
		IPDS_RSPCurrent = std::move(_x.IPDS_RSPCurrent);
		IPDS_FRRVMHeatCurrent = std::move(_x.IPDS_FRRVMHeatCurrent);
		IPDS_FRRVMCurrent = std::move(_x.IPDS_FRRVMCurrent);
		IPDS_FRWindowCurrent = std::move(_x.IPDS_FRWindowCurrent);
		IPDS_ZCUTVoltLvAct = std::move(_x.IPDS_ZCUTVoltLvAct);
		IPDS_RLWindowCurrent = std::move(_x.IPDS_RLWindowCurrent);
		IPDS_RRWindowCurrent = std::move(_x.IPDS_RRWindowCurrent);
		IPDS_RRTurnL1Current = std::move(_x.IPDS_RRTurnL1Current);
		IPDS_RRTurnL2Current = std::move(_x.IPDS_RRTurnL2Current);
		IPDS_RFogLCurrent = std::move(_x.IPDS_RFogLCurrent);
		IPDS_RLPosLCurrent = std::move(_x.IPDS_RLPosLCurrent);
		IPDS_RRPosL1Current = std::move(_x.IPDS_RRPosL1Current);
		IPDS_RRPosL2Current = std::move(_x.IPDS_RRPosL2Current);
		IPDS_RLPBrakeLCurrent = std::move(_x.IPDS_RLPBrakeLCurrent);
		IPDS_RRPBrakeLCurrent = std::move(_x.IPDS_RRPBrakeLCurrent);
		IPDS_LicenseCurrent = std::move(_x.IPDS_LicenseCurrent);
		IPDS_CHMSLCurrent = std::move(_x.IPDS_CHMSLCurrent);
		IPDS_ReverseLCurrent = std::move(_x.IPDS_ReverseLCurrent);
		IPDS_LSpindle1Current = std::move(_x.IPDS_LSpindle1Current);
		IPDS_LSpindle2Current = std::move(_x.IPDS_LSpindle2Current);
		IPDS_LCinchCurrent = std::move(_x.IPDS_LCinchCurrent);
		IPDS_RWiperCurrent = std::move(_x.IPDS_RWiperCurrent);
		IPDS_REPBCurrent = std::move(_x.IPDS_REPBCurrent);
		return *this;
	}
*/

	using IsEnumerableTag = void;
	template<typename F>
	void enumerate(F& fun) {
		fun(IPDS_ZCUFVoltLvAct);
		fun(IPDS_FWiperHCurrent);
		fun(IPDS_ZCULVoltLvAct);
		fun(IPDS_DSeatVibCurrent);
		fun(IPDS_DFanSeatCurrent);
		fun(IPDS_DHeatCurrent);
		fun(IPDS_FLWindowCurrent);
		fun(IPDS_IALCurrent);
		fun(IPDS_LSPLampCurrent);
		fun(IPDS_RoomLightCurrent);
		fun(IPDS_SWHCurrent);
		fun(IPDS_FLRVMHeatCurrent);
		fun(IPDS_FLRVMCurrent);
		fun(IPDS_DSMCurrent);
		fun(IPDS_ZCURVoltLvAct);
		fun(IPDS_PHeatCurrent);
		fun(IPDS_PFRSeatCurrent);
		fun(IPDS_PBackrestCurrent);
		fun(IPDS_PLiftSeatCurrent);
		fun(IPDS_PLiftCushionCurrent);
		fun(IPDS_PRootRestCurrent);
		fun(IPDS_PFRCushionCurrent);
		fun(IPDS_PFanSeatCurrent);
		fun(IPDS_RSPLampCurrent);
		fun(IPDS_RSPCurrent);
		fun(IPDS_FRRVMHeatCurrent);
		fun(IPDS_FRRVMCurrent);
		fun(IPDS_FRWindowCurrent);
		fun(IPDS_ZCUTVoltLvAct);
		fun(IPDS_RLWindowCurrent);
		fun(IPDS_RRWindowCurrent);
		fun(IPDS_RRTurnL1Current);
		fun(IPDS_RRTurnL2Current);
		fun(IPDS_RFogLCurrent);
		fun(IPDS_RLPosLCurrent);
		fun(IPDS_RRPosL1Current);
		fun(IPDS_RRPosL2Current);
		fun(IPDS_RLPBrakeLCurrent);
		fun(IPDS_RRPBrakeLCurrent);
		fun(IPDS_LicenseCurrent);
		fun(IPDS_CHMSLCurrent);
		fun(IPDS_ReverseLCurrent);
		fun(IPDS_LSpindle1Current);
		fun(IPDS_LSpindle2Current);
		fun(IPDS_LCinchCurrent);
		fun(IPDS_RWiperCurrent);
		fun(IPDS_REPBCurrent);
	}

	template<typename F>
	void GetSize(F& fun) const{
		fun(IPDS_ZCUFVoltLvAct);
		fun(IPDS_FWiperHCurrent);
		fun(IPDS_ZCULVoltLvAct);
		fun(IPDS_DSeatVibCurrent);
		fun(IPDS_DFanSeatCurrent);
		fun(IPDS_DHeatCurrent);
		fun(IPDS_FLWindowCurrent);
		fun(IPDS_IALCurrent);
		fun(IPDS_LSPLampCurrent);
		fun(IPDS_RoomLightCurrent);
		fun(IPDS_SWHCurrent);
		fun(IPDS_FLRVMHeatCurrent);
		fun(IPDS_FLRVMCurrent);
		fun(IPDS_DSMCurrent);
		fun(IPDS_ZCURVoltLvAct);
		fun(IPDS_PHeatCurrent);
		fun(IPDS_PFRSeatCurrent);
		fun(IPDS_PBackrestCurrent);
		fun(IPDS_PLiftSeatCurrent);
		fun(IPDS_PLiftCushionCurrent);
		fun(IPDS_PRootRestCurrent);
		fun(IPDS_PFRCushionCurrent);
		fun(IPDS_PFanSeatCurrent);
		fun(IPDS_RSPLampCurrent);
		fun(IPDS_RSPCurrent);
		fun(IPDS_FRRVMHeatCurrent);
		fun(IPDS_FRRVMCurrent);
		fun(IPDS_FRWindowCurrent);
		fun(IPDS_ZCUTVoltLvAct);
		fun(IPDS_RLWindowCurrent);
		fun(IPDS_RRWindowCurrent);
		fun(IPDS_RRTurnL1Current);
		fun(IPDS_RRTurnL2Current);
		fun(IPDS_RFogLCurrent);
		fun(IPDS_RLPosLCurrent);
		fun(IPDS_RRPosL1Current);
		fun(IPDS_RRPosL2Current);
		fun(IPDS_RLPBrakeLCurrent);
		fun(IPDS_RRPBrakeLCurrent);
		fun(IPDS_LicenseCurrent);
		fun(IPDS_CHMSLCurrent);
		fun(IPDS_ReverseLCurrent);
		fun(IPDS_LSpindle1Current);
		fun(IPDS_LSpindle2Current);
		fun(IPDS_LCinchCurrent);
		fun(IPDS_RWiperCurrent);
		fun(IPDS_REPBCurrent);
	}
	template<typename F>
	void serialize(F& fun) const{
		fun << (IPDS_ZCUFVoltLvAct);
		fun << (IPDS_FWiperHCurrent);
		fun << (IPDS_ZCULVoltLvAct);
		fun << (IPDS_DSeatVibCurrent);
		fun << (IPDS_DFanSeatCurrent);
		fun << (IPDS_DHeatCurrent);
		fun << (IPDS_FLWindowCurrent);
		fun << (IPDS_IALCurrent);
		fun << (IPDS_LSPLampCurrent);
		fun << (IPDS_RoomLightCurrent);
		fun << (IPDS_SWHCurrent);
		fun << (IPDS_FLRVMHeatCurrent);
		fun << (IPDS_FLRVMCurrent);
		fun << (IPDS_DSMCurrent);
		fun << (IPDS_ZCURVoltLvAct);
		fun << (IPDS_PHeatCurrent);
		fun << (IPDS_PFRSeatCurrent);
		fun << (IPDS_PBackrestCurrent);
		fun << (IPDS_PLiftSeatCurrent);
		fun << (IPDS_PLiftCushionCurrent);
		fun << (IPDS_PRootRestCurrent);
		fun << (IPDS_PFRCushionCurrent);
		fun << (IPDS_PFanSeatCurrent);
		fun << (IPDS_RSPLampCurrent);
		fun << (IPDS_RSPCurrent);
		fun << (IPDS_FRRVMHeatCurrent);
		fun << (IPDS_FRRVMCurrent);
		fun << (IPDS_FRWindowCurrent);
		fun << (IPDS_ZCUTVoltLvAct);
		fun << (IPDS_RLWindowCurrent);
		fun << (IPDS_RRWindowCurrent);
		fun << (IPDS_RRTurnL1Current);
		fun << (IPDS_RRTurnL2Current);
		fun << (IPDS_RFogLCurrent);
		fun << (IPDS_RLPosLCurrent);
		fun << (IPDS_RRPosL1Current);
		fun << (IPDS_RRPosL2Current);
		fun << (IPDS_RLPBrakeLCurrent);
		fun << (IPDS_RRPBrakeLCurrent);
		fun << (IPDS_LicenseCurrent);
		fun << (IPDS_CHMSLCurrent);
		fun << (IPDS_ReverseLCurrent);
		fun << (IPDS_LSpindle1Current);
		fun << (IPDS_LSpindle2Current);
		fun << (IPDS_LCinchCurrent);
		fun << (IPDS_RWiperCurrent);
		fun << (IPDS_REPBCurrent);
	}
	template<typename F>
	void deserialize(F& fun){
		fun >> (IPDS_ZCUFVoltLvAct);
		fun >> (IPDS_FWiperHCurrent);
		fun >> (IPDS_ZCULVoltLvAct);
		fun >> (IPDS_DSeatVibCurrent);
		fun >> (IPDS_DFanSeatCurrent);
		fun >> (IPDS_DHeatCurrent);
		fun >> (IPDS_FLWindowCurrent);
		fun >> (IPDS_IALCurrent);
		fun >> (IPDS_LSPLampCurrent);
		fun >> (IPDS_RoomLightCurrent);
		fun >> (IPDS_SWHCurrent);
		fun >> (IPDS_FLRVMHeatCurrent);
		fun >> (IPDS_FLRVMCurrent);
		fun >> (IPDS_DSMCurrent);
		fun >> (IPDS_ZCURVoltLvAct);
		fun >> (IPDS_PHeatCurrent);
		fun >> (IPDS_PFRSeatCurrent);
		fun >> (IPDS_PBackrestCurrent);
		fun >> (IPDS_PLiftSeatCurrent);
		fun >> (IPDS_PLiftCushionCurrent);
		fun >> (IPDS_PRootRestCurrent);
		fun >> (IPDS_PFRCushionCurrent);
		fun >> (IPDS_PFanSeatCurrent);
		fun >> (IPDS_RSPLampCurrent);
		fun >> (IPDS_RSPCurrent);
		fun >> (IPDS_FRRVMHeatCurrent);
		fun >> (IPDS_FRRVMCurrent);
		fun >> (IPDS_FRWindowCurrent);
		fun >> (IPDS_ZCUTVoltLvAct);
		fun >> (IPDS_RLWindowCurrent);
		fun >> (IPDS_RRWindowCurrent);
		fun >> (IPDS_RRTurnL1Current);
		fun >> (IPDS_RRTurnL2Current);
		fun >> (IPDS_RFogLCurrent);
		fun >> (IPDS_RLPosLCurrent);
		fun >> (IPDS_RRPosL1Current);
		fun >> (IPDS_RRPosL2Current);
		fun >> (IPDS_RLPBrakeLCurrent);
		fun >> (IPDS_RRPBrakeLCurrent);
		fun >> (IPDS_LicenseCurrent);
		fun >> (IPDS_CHMSLCurrent);
		fun >> (IPDS_ReverseLCurrent);
		fun >> (IPDS_LSpindle1Current);
		fun >> (IPDS_LSpindle2Current);
		fun >> (IPDS_LCinchCurrent);
		fun >> (IPDS_RWiperCurrent);
		fun >> (IPDS_REPBCurrent);
	}
};

#endif //____BDCIPDS4_H__
