#ifndef __ARA_COM_VSOMEIP__BATTERYSIGNALGROUPDATA_H__
#define __ARA_COM_VSOMEIP__BATTERYSIGNALGROUPDATA_H__


#include "cstdint"





namespace ara
{
namespace com
{
namespace vsomeip
{

struct BatterySignalGroupData {
public:
	std::uint8_t EEM_EBSFSOCWakeUpEn;
	std::uint8_t EEM_EBSFSOC2WakeUpEn;
	std::uint8_t EEM_EBSTSOCWakeUpEn;
	std::uint8_t EEM_EBSTSOC2WakeUpEn;
	std::uint8_t EEM_LdCtlLv;
	std::uint8_t EEM_LdCtlSt;
	std::uint16_t EBSF_BattVolt;
	std::uint8_t EBSF_CurrentRange;
	std::uint16_t EBSF_BattCurrent;
	std::uint8_t EBSF_BattTemp;
	std::uint8_t EBSF_BattQuiescentCurrent;
	std::uint8_t EBSF_CurrentSt;
	std::uint8_t EBSF_VoltSt;
	std::uint8_t EBSF_TempSt;
	std::uint8_t EBSF_CalibrationErr;
	std::uint8_t EBSF_IdentificationErr;
	std::uint8_t EBSF_Response_Err;
	std::uint8_t EBSF_BattInconsistencyFlag;
	std::uint8_t EBSF_SOC;
	std::uint8_t EBSF_SOH_SUL;
	std::uint8_t EBSF_SOFV_StopEnable;
	std::uint8_t EBSF_SOFV_Restart;
	std::uint8_t EBSF_SOH_LAM;
	std::uint8_t EBSF_SOH_COR;
	std::uint8_t EBSF_SOC_STATE;
	std::uint8_t EBSF_SOH_SUL_St;
	std::uint8_t EBSF_SOFV_StopEnable_St;
	std::uint8_t EBSF_SOFV_Restart_St;
	std::uint8_t EBSF_SOH_LAM_St;
	std::uint8_t EBSF_SOH_COR_St;
	std::uint16_t EBSF_Q_Charge;
	std::uint16_t EBSF_Q_Discharge;
	std::uint16_t EBST_BattVolt;
	std::uint8_t EBST_CurrentRange;
	std::uint16_t EBST_BattCurrent;
	std::uint8_t EBST_BattTemp;
	std::uint8_t EBST_BattQuiescentCurrent;
	std::uint8_t EBST_CurrentSt;
	std::uint8_t EBST_VoltSt;
	std::uint8_t EBST_TempSt;
	std::uint8_t EBST_CalibrationErr;
	std::uint8_t EBST_IdentificationErr;
	std::uint8_t EBST_Response_Err;
	std::uint8_t EBST_BattInconsistencyFlag;
	std::uint8_t EBST_SOC;
	std::uint8_t EBST_SOH_SUL;
	std::uint8_t EBST_SOFV_StopEnable;
	std::uint8_t EBST_SOFV_Restart;
	std::uint8_t EBST_SOH_LAM;
	std::uint8_t EBST_SOH_COR;
	std::uint8_t EBST_SOC_STATE;
	std::uint8_t EBST_SOH_SUL_St;
	std::uint8_t EBST_SOFV_StopEnable_St;
	std::uint8_t EBST_SOFV_Restart_St;
	std::uint8_t EBST_SOH_LAM_St;
	std::uint8_t EBST_SOH_COR_St;
	std::uint16_t EBST_Q_Charge;
	std::uint16_t EBST_Q_Discharge;
/*
	BatterySignalGroupData() {}
	~BatterySignalGroupData() {}
	BatterySignalGroupData(const std::uint8_t _EEM_EBSFSOCWakeUpEn,const std::uint8_t _EEM_EBSFSOC2WakeUpEn,const std::uint8_t _EEM_EBSTSOCWakeUpEn,const std::uint8_t _EEM_EBSTSOC2WakeUpEn,const std::uint8_t _EEM_LdCtlLv,const std::uint8_t _EEM_LdCtlSt,const std::uint16_t _EBSF_BattVolt,const std::uint8_t _EBSF_CurrentRange,const std::uint16_t _EBSF_BattCurrent,const std::uint8_t _EBSF_BattTemp,const std::uint8_t _EBSF_BattQuiescentCurrent,const std::uint8_t _EBSF_CurrentSt,const std::uint8_t _EBSF_VoltSt,const std::uint8_t _EBSF_TempSt,const std::uint8_t _EBSF_CalibrationErr,const std::uint8_t _EBSF_IdentificationErr,const std::uint8_t _EBSF_Response_Err,const std::uint8_t _EBSF_BattInconsistencyFlag,const std::uint8_t _EBSF_SOC,const std::uint8_t _EBSF_SOH_SUL,const std::uint8_t _EBSF_SOFV_StopEnable,const std::uint8_t _EBSF_SOFV_Restart,const std::uint8_t _EBSF_SOH_LAM,const std::uint8_t _EBSF_SOH_COR,const std::uint8_t _EBSF_SOC_STATE,const std::uint8_t _EBSF_SOH_SUL_St,const std::uint8_t _EBSF_SOFV_StopEnable_St,const std::uint8_t _EBSF_SOFV_Restart_St,const std::uint8_t _EBSF_SOH_LAM_St,const std::uint8_t _EBSF_SOH_COR_St,const std::uint16_t _EBSF_Q_Charge,const std::uint16_t _EBSF_Q_Discharge,const std::uint16_t _EBST_BattVolt,const std::uint8_t _EBST_CurrentRange,const std::uint16_t _EBST_BattCurrent,const std::uint8_t _EBST_BattTemp,const std::uint8_t _EBST_BattQuiescentCurrent,const std::uint8_t _EBST_CurrentSt,const std::uint8_t _EBST_VoltSt,const std::uint8_t _EBST_TempSt,const std::uint8_t _EBST_CalibrationErr,const std::uint8_t _EBST_IdentificationErr,const std::uint8_t _EBST_Response_Err,const std::uint8_t _EBST_BattInconsistencyFlag,const std::uint8_t _EBST_SOC,const std::uint8_t _EBST_SOH_SUL,const std::uint8_t _EBST_SOFV_StopEnable,const std::uint8_t _EBST_SOFV_Restart,const std::uint8_t _EBST_SOH_LAM,const std::uint8_t _EBST_SOH_COR,const std::uint8_t _EBST_SOC_STATE,const std::uint8_t _EBST_SOH_SUL_St,const std::uint8_t _EBST_SOFV_StopEnable_St,const std::uint8_t _EBST_SOFV_Restart_St,const std::uint8_t _EBST_SOH_LAM_St,const std::uint8_t _EBST_SOH_COR_St,const std::uint16_t _EBST_Q_Charge,const std::uint16_t _EBST_Q_Discharge):EEM_EBSFSOCWakeUpEn(_EEM_EBSFSOCWakeUpEn),EEM_EBSFSOC2WakeUpEn(_EEM_EBSFSOC2WakeUpEn),EEM_EBSTSOCWakeUpEn(_EEM_EBSTSOCWakeUpEn),EEM_EBSTSOC2WakeUpEn(_EEM_EBSTSOC2WakeUpEn),EEM_LdCtlLv(_EEM_LdCtlLv),EEM_LdCtlSt(_EEM_LdCtlSt),EBSF_BattVolt(_EBSF_BattVolt),EBSF_CurrentRange(_EBSF_CurrentRange),EBSF_BattCurrent(_EBSF_BattCurrent),EBSF_BattTemp(_EBSF_BattTemp),EBSF_BattQuiescentCurrent(_EBSF_BattQuiescentCurrent),EBSF_CurrentSt(_EBSF_CurrentSt),EBSF_VoltSt(_EBSF_VoltSt),EBSF_TempSt(_EBSF_TempSt),EBSF_CalibrationErr(_EBSF_CalibrationErr),EBSF_IdentificationErr(_EBSF_IdentificationErr),EBSF_Response_Err(_EBSF_Response_Err),EBSF_BattInconsistencyFlag(_EBSF_BattInconsistencyFlag),EBSF_SOC(_EBSF_SOC),EBSF_SOH_SUL(_EBSF_SOH_SUL),EBSF_SOFV_StopEnable(_EBSF_SOFV_StopEnable),EBSF_SOFV_Restart(_EBSF_SOFV_Restart),EBSF_SOH_LAM(_EBSF_SOH_LAM),EBSF_SOH_COR(_EBSF_SOH_COR),EBSF_SOC_STATE(_EBSF_SOC_STATE),EBSF_SOH_SUL_St(_EBSF_SOH_SUL_St),EBSF_SOFV_StopEnable_St(_EBSF_SOFV_StopEnable_St),EBSF_SOFV_Restart_St(_EBSF_SOFV_Restart_St),EBSF_SOH_LAM_St(_EBSF_SOH_LAM_St),EBSF_SOH_COR_St(_EBSF_SOH_COR_St),EBSF_Q_Charge(_EBSF_Q_Charge),EBSF_Q_Discharge(_EBSF_Q_Discharge),EBST_BattVolt(_EBST_BattVolt),EBST_CurrentRange(_EBST_CurrentRange),EBST_BattCurrent(_EBST_BattCurrent),EBST_BattTemp(_EBST_BattTemp),EBST_BattQuiescentCurrent(_EBST_BattQuiescentCurrent),EBST_CurrentSt(_EBST_CurrentSt),EBST_VoltSt(_EBST_VoltSt),EBST_TempSt(_EBST_TempSt),EBST_CalibrationErr(_EBST_CalibrationErr),EBST_IdentificationErr(_EBST_IdentificationErr),EBST_Response_Err(_EBST_Response_Err),EBST_BattInconsistencyFlag(_EBST_BattInconsistencyFlag),EBST_SOC(_EBST_SOC),EBST_SOH_SUL(_EBST_SOH_SUL),EBST_SOFV_StopEnable(_EBST_SOFV_StopEnable),EBST_SOFV_Restart(_EBST_SOFV_Restart),EBST_SOH_LAM(_EBST_SOH_LAM),EBST_SOH_COR(_EBST_SOH_COR),EBST_SOC_STATE(_EBST_SOC_STATE),EBST_SOH_SUL_St(_EBST_SOH_SUL_St),EBST_SOFV_StopEnable_St(_EBST_SOFV_StopEnable_St),EBST_SOFV_Restart_St(_EBST_SOFV_Restart_St),EBST_SOH_LAM_St(_EBST_SOH_LAM_St),EBST_SOH_COR_St(_EBST_SOH_COR_St),EBST_Q_Charge(_EBST_Q_Charge),EBST_Q_Discharge(_EBST_Q_Discharge) {}
	BatterySignalGroupData(const BatterySignalGroupData &_x){
		EEM_EBSFSOCWakeUpEn = _x.EEM_EBSFSOCWakeUpEn;
		EEM_EBSFSOC2WakeUpEn = _x.EEM_EBSFSOC2WakeUpEn;
		EEM_EBSTSOCWakeUpEn = _x.EEM_EBSTSOCWakeUpEn;
		EEM_EBSTSOC2WakeUpEn = _x.EEM_EBSTSOC2WakeUpEn;
		EEM_LdCtlLv = _x.EEM_LdCtlLv;
		EEM_LdCtlSt = _x.EEM_LdCtlSt;
		EBSF_BattVolt = _x.EBSF_BattVolt;
		EBSF_CurrentRange = _x.EBSF_CurrentRange;
		EBSF_BattCurrent = _x.EBSF_BattCurrent;
		EBSF_BattTemp = _x.EBSF_BattTemp;
		EBSF_BattQuiescentCurrent = _x.EBSF_BattQuiescentCurrent;
		EBSF_CurrentSt = _x.EBSF_CurrentSt;
		EBSF_VoltSt = _x.EBSF_VoltSt;
		EBSF_TempSt = _x.EBSF_TempSt;
		EBSF_CalibrationErr = _x.EBSF_CalibrationErr;
		EBSF_IdentificationErr = _x.EBSF_IdentificationErr;
		EBSF_Response_Err = _x.EBSF_Response_Err;
		EBSF_BattInconsistencyFlag = _x.EBSF_BattInconsistencyFlag;
		EBSF_SOC = _x.EBSF_SOC;
		EBSF_SOH_SUL = _x.EBSF_SOH_SUL;
		EBSF_SOFV_StopEnable = _x.EBSF_SOFV_StopEnable;
		EBSF_SOFV_Restart = _x.EBSF_SOFV_Restart;
		EBSF_SOH_LAM = _x.EBSF_SOH_LAM;
		EBSF_SOH_COR = _x.EBSF_SOH_COR;
		EBSF_SOC_STATE = _x.EBSF_SOC_STATE;
		EBSF_SOH_SUL_St = _x.EBSF_SOH_SUL_St;
		EBSF_SOFV_StopEnable_St = _x.EBSF_SOFV_StopEnable_St;
		EBSF_SOFV_Restart_St = _x.EBSF_SOFV_Restart_St;
		EBSF_SOH_LAM_St = _x.EBSF_SOH_LAM_St;
		EBSF_SOH_COR_St = _x.EBSF_SOH_COR_St;
		EBSF_Q_Charge = _x.EBSF_Q_Charge;
		EBSF_Q_Discharge = _x.EBSF_Q_Discharge;
		EBST_BattVolt = _x.EBST_BattVolt;
		EBST_CurrentRange = _x.EBST_CurrentRange;
		EBST_BattCurrent = _x.EBST_BattCurrent;
		EBST_BattTemp = _x.EBST_BattTemp;
		EBST_BattQuiescentCurrent = _x.EBST_BattQuiescentCurrent;
		EBST_CurrentSt = _x.EBST_CurrentSt;
		EBST_VoltSt = _x.EBST_VoltSt;
		EBST_TempSt = _x.EBST_TempSt;
		EBST_CalibrationErr = _x.EBST_CalibrationErr;
		EBST_IdentificationErr = _x.EBST_IdentificationErr;
		EBST_Response_Err = _x.EBST_Response_Err;
		EBST_BattInconsistencyFlag = _x.EBST_BattInconsistencyFlag;
		EBST_SOC = _x.EBST_SOC;
		EBST_SOH_SUL = _x.EBST_SOH_SUL;
		EBST_SOFV_StopEnable = _x.EBST_SOFV_StopEnable;
		EBST_SOFV_Restart = _x.EBST_SOFV_Restart;
		EBST_SOH_LAM = _x.EBST_SOH_LAM;
		EBST_SOH_COR = _x.EBST_SOH_COR;
		EBST_SOC_STATE = _x.EBST_SOC_STATE;
		EBST_SOH_SUL_St = _x.EBST_SOH_SUL_St;
		EBST_SOFV_StopEnable_St = _x.EBST_SOFV_StopEnable_St;
		EBST_SOFV_Restart_St = _x.EBST_SOFV_Restart_St;
		EBST_SOH_LAM_St = _x.EBST_SOH_LAM_St;
		EBST_SOH_COR_St = _x.EBST_SOH_COR_St;
		EBST_Q_Charge = _x.EBST_Q_Charge;
		EBST_Q_Discharge = _x.EBST_Q_Discharge;
	}
	BatterySignalGroupData(BatterySignalGroupData &&_x){
		EEM_EBSFSOCWakeUpEn = std::move(_x.EEM_EBSFSOCWakeUpEn);
		EEM_EBSFSOC2WakeUpEn = std::move(_x.EEM_EBSFSOC2WakeUpEn);
		EEM_EBSTSOCWakeUpEn = std::move(_x.EEM_EBSTSOCWakeUpEn);
		EEM_EBSTSOC2WakeUpEn = std::move(_x.EEM_EBSTSOC2WakeUpEn);
		EEM_LdCtlLv = std::move(_x.EEM_LdCtlLv);
		EEM_LdCtlSt = std::move(_x.EEM_LdCtlSt);
		EBSF_BattVolt = std::move(_x.EBSF_BattVolt);
		EBSF_CurrentRange = std::move(_x.EBSF_CurrentRange);
		EBSF_BattCurrent = std::move(_x.EBSF_BattCurrent);
		EBSF_BattTemp = std::move(_x.EBSF_BattTemp);
		EBSF_BattQuiescentCurrent = std::move(_x.EBSF_BattQuiescentCurrent);
		EBSF_CurrentSt = std::move(_x.EBSF_CurrentSt);
		EBSF_VoltSt = std::move(_x.EBSF_VoltSt);
		EBSF_TempSt = std::move(_x.EBSF_TempSt);
		EBSF_CalibrationErr = std::move(_x.EBSF_CalibrationErr);
		EBSF_IdentificationErr = std::move(_x.EBSF_IdentificationErr);
		EBSF_Response_Err = std::move(_x.EBSF_Response_Err);
		EBSF_BattInconsistencyFlag = std::move(_x.EBSF_BattInconsistencyFlag);
		EBSF_SOC = std::move(_x.EBSF_SOC);
		EBSF_SOH_SUL = std::move(_x.EBSF_SOH_SUL);
		EBSF_SOFV_StopEnable = std::move(_x.EBSF_SOFV_StopEnable);
		EBSF_SOFV_Restart = std::move(_x.EBSF_SOFV_Restart);
		EBSF_SOH_LAM = std::move(_x.EBSF_SOH_LAM);
		EBSF_SOH_COR = std::move(_x.EBSF_SOH_COR);
		EBSF_SOC_STATE = std::move(_x.EBSF_SOC_STATE);
		EBSF_SOH_SUL_St = std::move(_x.EBSF_SOH_SUL_St);
		EBSF_SOFV_StopEnable_St = std::move(_x.EBSF_SOFV_StopEnable_St);
		EBSF_SOFV_Restart_St = std::move(_x.EBSF_SOFV_Restart_St);
		EBSF_SOH_LAM_St = std::move(_x.EBSF_SOH_LAM_St);
		EBSF_SOH_COR_St = std::move(_x.EBSF_SOH_COR_St);
		EBSF_Q_Charge = std::move(_x.EBSF_Q_Charge);
		EBSF_Q_Discharge = std::move(_x.EBSF_Q_Discharge);
		EBST_BattVolt = std::move(_x.EBST_BattVolt);
		EBST_CurrentRange = std::move(_x.EBST_CurrentRange);
		EBST_BattCurrent = std::move(_x.EBST_BattCurrent);
		EBST_BattTemp = std::move(_x.EBST_BattTemp);
		EBST_BattQuiescentCurrent = std::move(_x.EBST_BattQuiescentCurrent);
		EBST_CurrentSt = std::move(_x.EBST_CurrentSt);
		EBST_VoltSt = std::move(_x.EBST_VoltSt);
		EBST_TempSt = std::move(_x.EBST_TempSt);
		EBST_CalibrationErr = std::move(_x.EBST_CalibrationErr);
		EBST_IdentificationErr = std::move(_x.EBST_IdentificationErr);
		EBST_Response_Err = std::move(_x.EBST_Response_Err);
		EBST_BattInconsistencyFlag = std::move(_x.EBST_BattInconsistencyFlag);
		EBST_SOC = std::move(_x.EBST_SOC);
		EBST_SOH_SUL = std::move(_x.EBST_SOH_SUL);
		EBST_SOFV_StopEnable = std::move(_x.EBST_SOFV_StopEnable);
		EBST_SOFV_Restart = std::move(_x.EBST_SOFV_Restart);
		EBST_SOH_LAM = std::move(_x.EBST_SOH_LAM);
		EBST_SOH_COR = std::move(_x.EBST_SOH_COR);
		EBST_SOC_STATE = std::move(_x.EBST_SOC_STATE);
		EBST_SOH_SUL_St = std::move(_x.EBST_SOH_SUL_St);
		EBST_SOFV_StopEnable_St = std::move(_x.EBST_SOFV_StopEnable_St);
		EBST_SOFV_Restart_St = std::move(_x.EBST_SOFV_Restart_St);
		EBST_SOH_LAM_St = std::move(_x.EBST_SOH_LAM_St);
		EBST_SOH_COR_St = std::move(_x.EBST_SOH_COR_St);
		EBST_Q_Charge = std::move(_x.EBST_Q_Charge);
		EBST_Q_Discharge = std::move(_x.EBST_Q_Discharge);
	}
	BatterySignalGroupData& operator=(const BatterySignalGroupData &_x){
		EEM_EBSFSOCWakeUpEn = _x.EEM_EBSFSOCWakeUpEn;
		EEM_EBSFSOC2WakeUpEn = _x.EEM_EBSFSOC2WakeUpEn;
		EEM_EBSTSOCWakeUpEn = _x.EEM_EBSTSOCWakeUpEn;
		EEM_EBSTSOC2WakeUpEn = _x.EEM_EBSTSOC2WakeUpEn;
		EEM_LdCtlLv = _x.EEM_LdCtlLv;
		EEM_LdCtlSt = _x.EEM_LdCtlSt;
		EBSF_BattVolt = _x.EBSF_BattVolt;
		EBSF_CurrentRange = _x.EBSF_CurrentRange;
		EBSF_BattCurrent = _x.EBSF_BattCurrent;
		EBSF_BattTemp = _x.EBSF_BattTemp;
		EBSF_BattQuiescentCurrent = _x.EBSF_BattQuiescentCurrent;
		EBSF_CurrentSt = _x.EBSF_CurrentSt;
		EBSF_VoltSt = _x.EBSF_VoltSt;
		EBSF_TempSt = _x.EBSF_TempSt;
		EBSF_CalibrationErr = _x.EBSF_CalibrationErr;
		EBSF_IdentificationErr = _x.EBSF_IdentificationErr;
		EBSF_Response_Err = _x.EBSF_Response_Err;
		EBSF_BattInconsistencyFlag = _x.EBSF_BattInconsistencyFlag;
		EBSF_SOC = _x.EBSF_SOC;
		EBSF_SOH_SUL = _x.EBSF_SOH_SUL;
		EBSF_SOFV_StopEnable = _x.EBSF_SOFV_StopEnable;
		EBSF_SOFV_Restart = _x.EBSF_SOFV_Restart;
		EBSF_SOH_LAM = _x.EBSF_SOH_LAM;
		EBSF_SOH_COR = _x.EBSF_SOH_COR;
		EBSF_SOC_STATE = _x.EBSF_SOC_STATE;
		EBSF_SOH_SUL_St = _x.EBSF_SOH_SUL_St;
		EBSF_SOFV_StopEnable_St = _x.EBSF_SOFV_StopEnable_St;
		EBSF_SOFV_Restart_St = _x.EBSF_SOFV_Restart_St;
		EBSF_SOH_LAM_St = _x.EBSF_SOH_LAM_St;
		EBSF_SOH_COR_St = _x.EBSF_SOH_COR_St;
		EBSF_Q_Charge = _x.EBSF_Q_Charge;
		EBSF_Q_Discharge = _x.EBSF_Q_Discharge;
		EBST_BattVolt = _x.EBST_BattVolt;
		EBST_CurrentRange = _x.EBST_CurrentRange;
		EBST_BattCurrent = _x.EBST_BattCurrent;
		EBST_BattTemp = _x.EBST_BattTemp;
		EBST_BattQuiescentCurrent = _x.EBST_BattQuiescentCurrent;
		EBST_CurrentSt = _x.EBST_CurrentSt;
		EBST_VoltSt = _x.EBST_VoltSt;
		EBST_TempSt = _x.EBST_TempSt;
		EBST_CalibrationErr = _x.EBST_CalibrationErr;
		EBST_IdentificationErr = _x.EBST_IdentificationErr;
		EBST_Response_Err = _x.EBST_Response_Err;
		EBST_BattInconsistencyFlag = _x.EBST_BattInconsistencyFlag;
		EBST_SOC = _x.EBST_SOC;
		EBST_SOH_SUL = _x.EBST_SOH_SUL;
		EBST_SOFV_StopEnable = _x.EBST_SOFV_StopEnable;
		EBST_SOFV_Restart = _x.EBST_SOFV_Restart;
		EBST_SOH_LAM = _x.EBST_SOH_LAM;
		EBST_SOH_COR = _x.EBST_SOH_COR;
		EBST_SOC_STATE = _x.EBST_SOC_STATE;
		EBST_SOH_SUL_St = _x.EBST_SOH_SUL_St;
		EBST_SOFV_StopEnable_St = _x.EBST_SOFV_StopEnable_St;
		EBST_SOFV_Restart_St = _x.EBST_SOFV_Restart_St;
		EBST_SOH_LAM_St = _x.EBST_SOH_LAM_St;
		EBST_SOH_COR_St = _x.EBST_SOH_COR_St;
		EBST_Q_Charge = _x.EBST_Q_Charge;
		EBST_Q_Discharge = _x.EBST_Q_Discharge;
		return *this;
	}
	BatterySignalGroupData& operator=(BatterySignalGroupData &&_x){
		EEM_EBSFSOCWakeUpEn = std::move(_x.EEM_EBSFSOCWakeUpEn);
		EEM_EBSFSOC2WakeUpEn = std::move(_x.EEM_EBSFSOC2WakeUpEn);
		EEM_EBSTSOCWakeUpEn = std::move(_x.EEM_EBSTSOCWakeUpEn);
		EEM_EBSTSOC2WakeUpEn = std::move(_x.EEM_EBSTSOC2WakeUpEn);
		EEM_LdCtlLv = std::move(_x.EEM_LdCtlLv);
		EEM_LdCtlSt = std::move(_x.EEM_LdCtlSt);
		EBSF_BattVolt = std::move(_x.EBSF_BattVolt);
		EBSF_CurrentRange = std::move(_x.EBSF_CurrentRange);
		EBSF_BattCurrent = std::move(_x.EBSF_BattCurrent);
		EBSF_BattTemp = std::move(_x.EBSF_BattTemp);
		EBSF_BattQuiescentCurrent = std::move(_x.EBSF_BattQuiescentCurrent);
		EBSF_CurrentSt = std::move(_x.EBSF_CurrentSt);
		EBSF_VoltSt = std::move(_x.EBSF_VoltSt);
		EBSF_TempSt = std::move(_x.EBSF_TempSt);
		EBSF_CalibrationErr = std::move(_x.EBSF_CalibrationErr);
		EBSF_IdentificationErr = std::move(_x.EBSF_IdentificationErr);
		EBSF_Response_Err = std::move(_x.EBSF_Response_Err);
		EBSF_BattInconsistencyFlag = std::move(_x.EBSF_BattInconsistencyFlag);
		EBSF_SOC = std::move(_x.EBSF_SOC);
		EBSF_SOH_SUL = std::move(_x.EBSF_SOH_SUL);
		EBSF_SOFV_StopEnable = std::move(_x.EBSF_SOFV_StopEnable);
		EBSF_SOFV_Restart = std::move(_x.EBSF_SOFV_Restart);
		EBSF_SOH_LAM = std::move(_x.EBSF_SOH_LAM);
		EBSF_SOH_COR = std::move(_x.EBSF_SOH_COR);
		EBSF_SOC_STATE = std::move(_x.EBSF_SOC_STATE);
		EBSF_SOH_SUL_St = std::move(_x.EBSF_SOH_SUL_St);
		EBSF_SOFV_StopEnable_St = std::move(_x.EBSF_SOFV_StopEnable_St);
		EBSF_SOFV_Restart_St = std::move(_x.EBSF_SOFV_Restart_St);
		EBSF_SOH_LAM_St = std::move(_x.EBSF_SOH_LAM_St);
		EBSF_SOH_COR_St = std::move(_x.EBSF_SOH_COR_St);
		EBSF_Q_Charge = std::move(_x.EBSF_Q_Charge);
		EBSF_Q_Discharge = std::move(_x.EBSF_Q_Discharge);
		EBST_BattVolt = std::move(_x.EBST_BattVolt);
		EBST_CurrentRange = std::move(_x.EBST_CurrentRange);
		EBST_BattCurrent = std::move(_x.EBST_BattCurrent);
		EBST_BattTemp = std::move(_x.EBST_BattTemp);
		EBST_BattQuiescentCurrent = std::move(_x.EBST_BattQuiescentCurrent);
		EBST_CurrentSt = std::move(_x.EBST_CurrentSt);
		EBST_VoltSt = std::move(_x.EBST_VoltSt);
		EBST_TempSt = std::move(_x.EBST_TempSt);
		EBST_CalibrationErr = std::move(_x.EBST_CalibrationErr);
		EBST_IdentificationErr = std::move(_x.EBST_IdentificationErr);
		EBST_Response_Err = std::move(_x.EBST_Response_Err);
		EBST_BattInconsistencyFlag = std::move(_x.EBST_BattInconsistencyFlag);
		EBST_SOC = std::move(_x.EBST_SOC);
		EBST_SOH_SUL = std::move(_x.EBST_SOH_SUL);
		EBST_SOFV_StopEnable = std::move(_x.EBST_SOFV_StopEnable);
		EBST_SOFV_Restart = std::move(_x.EBST_SOFV_Restart);
		EBST_SOH_LAM = std::move(_x.EBST_SOH_LAM);
		EBST_SOH_COR = std::move(_x.EBST_SOH_COR);
		EBST_SOC_STATE = std::move(_x.EBST_SOC_STATE);
		EBST_SOH_SUL_St = std::move(_x.EBST_SOH_SUL_St);
		EBST_SOFV_StopEnable_St = std::move(_x.EBST_SOFV_StopEnable_St);
		EBST_SOFV_Restart_St = std::move(_x.EBST_SOFV_Restart_St);
		EBST_SOH_LAM_St = std::move(_x.EBST_SOH_LAM_St);
		EBST_SOH_COR_St = std::move(_x.EBST_SOH_COR_St);
		EBST_Q_Charge = std::move(_x.EBST_Q_Charge);
		EBST_Q_Discharge = std::move(_x.EBST_Q_Discharge);
		return *this;
	}
*/

	using IsEnumerableTag = void;
	template<typename F>
	void enumerate(F& fun) {
		fun(EEM_EBSFSOCWakeUpEn);
		fun(EEM_EBSFSOC2WakeUpEn);
		fun(EEM_EBSTSOCWakeUpEn);
		fun(EEM_EBSTSOC2WakeUpEn);
		fun(EEM_LdCtlLv);
		fun(EEM_LdCtlSt);
		fun(EBSF_BattVolt);
		fun(EBSF_CurrentRange);
		fun(EBSF_BattCurrent);
		fun(EBSF_BattTemp);
		fun(EBSF_BattQuiescentCurrent);
		fun(EBSF_CurrentSt);
		fun(EBSF_VoltSt);
		fun(EBSF_TempSt);
		fun(EBSF_CalibrationErr);
		fun(EBSF_IdentificationErr);
		fun(EBSF_Response_Err);
		fun(EBSF_BattInconsistencyFlag);
		fun(EBSF_SOC);
		fun(EBSF_SOH_SUL);
		fun(EBSF_SOFV_StopEnable);
		fun(EBSF_SOFV_Restart);
		fun(EBSF_SOH_LAM);
		fun(EBSF_SOH_COR);
		fun(EBSF_SOC_STATE);
		fun(EBSF_SOH_SUL_St);
		fun(EBSF_SOFV_StopEnable_St);
		fun(EBSF_SOFV_Restart_St);
		fun(EBSF_SOH_LAM_St);
		fun(EBSF_SOH_COR_St);
		fun(EBSF_Q_Charge);
		fun(EBSF_Q_Discharge);
		fun(EBST_BattVolt);
		fun(EBST_CurrentRange);
		fun(EBST_BattCurrent);
		fun(EBST_BattTemp);
		fun(EBST_BattQuiescentCurrent);
		fun(EBST_CurrentSt);
		fun(EBST_VoltSt);
		fun(EBST_TempSt);
		fun(EBST_CalibrationErr);
		fun(EBST_IdentificationErr);
		fun(EBST_Response_Err);
		fun(EBST_BattInconsistencyFlag);
		fun(EBST_SOC);
		fun(EBST_SOH_SUL);
		fun(EBST_SOFV_StopEnable);
		fun(EBST_SOFV_Restart);
		fun(EBST_SOH_LAM);
		fun(EBST_SOH_COR);
		fun(EBST_SOC_STATE);
		fun(EBST_SOH_SUL_St);
		fun(EBST_SOFV_StopEnable_St);
		fun(EBST_SOFV_Restart_St);
		fun(EBST_SOH_LAM_St);
		fun(EBST_SOH_COR_St);
		fun(EBST_Q_Charge);
		fun(EBST_Q_Discharge);
	}

	template<typename F>
	void GetSize(F& fun) const{
		fun(EEM_EBSFSOCWakeUpEn);
		fun(EEM_EBSFSOC2WakeUpEn);
		fun(EEM_EBSTSOCWakeUpEn);
		fun(EEM_EBSTSOC2WakeUpEn);
		fun(EEM_LdCtlLv);
		fun(EEM_LdCtlSt);
		fun(EBSF_BattVolt);
		fun(EBSF_CurrentRange);
		fun(EBSF_BattCurrent);
		fun(EBSF_BattTemp);
		fun(EBSF_BattQuiescentCurrent);
		fun(EBSF_CurrentSt);
		fun(EBSF_VoltSt);
		fun(EBSF_TempSt);
		fun(EBSF_CalibrationErr);
		fun(EBSF_IdentificationErr);
		fun(EBSF_Response_Err);
		fun(EBSF_BattInconsistencyFlag);
		fun(EBSF_SOC);
		fun(EBSF_SOH_SUL);
		fun(EBSF_SOFV_StopEnable);
		fun(EBSF_SOFV_Restart);
		fun(EBSF_SOH_LAM);
		fun(EBSF_SOH_COR);
		fun(EBSF_SOC_STATE);
		fun(EBSF_SOH_SUL_St);
		fun(EBSF_SOFV_StopEnable_St);
		fun(EBSF_SOFV_Restart_St);
		fun(EBSF_SOH_LAM_St);
		fun(EBSF_SOH_COR_St);
		fun(EBSF_Q_Charge);
		fun(EBSF_Q_Discharge);
		fun(EBST_BattVolt);
		fun(EBST_CurrentRange);
		fun(EBST_BattCurrent);
		fun(EBST_BattTemp);
		fun(EBST_BattQuiescentCurrent);
		fun(EBST_CurrentSt);
		fun(EBST_VoltSt);
		fun(EBST_TempSt);
		fun(EBST_CalibrationErr);
		fun(EBST_IdentificationErr);
		fun(EBST_Response_Err);
		fun(EBST_BattInconsistencyFlag);
		fun(EBST_SOC);
		fun(EBST_SOH_SUL);
		fun(EBST_SOFV_StopEnable);
		fun(EBST_SOFV_Restart);
		fun(EBST_SOH_LAM);
		fun(EBST_SOH_COR);
		fun(EBST_SOC_STATE);
		fun(EBST_SOH_SUL_St);
		fun(EBST_SOFV_StopEnable_St);
		fun(EBST_SOFV_Restart_St);
		fun(EBST_SOH_LAM_St);
		fun(EBST_SOH_COR_St);
		fun(EBST_Q_Charge);
		fun(EBST_Q_Discharge);
	}
	template<typename F>
	void serialize(F& fun) const{
		fun << (EEM_EBSFSOCWakeUpEn);
		fun << (EEM_EBSFSOC2WakeUpEn);
		fun << (EEM_EBSTSOCWakeUpEn);
		fun << (EEM_EBSTSOC2WakeUpEn);
		fun << (EEM_LdCtlLv);
		fun << (EEM_LdCtlSt);
		fun << (EBSF_BattVolt);
		fun << (EBSF_CurrentRange);
		fun << (EBSF_BattCurrent);
		fun << (EBSF_BattTemp);
		fun << (EBSF_BattQuiescentCurrent);
		fun << (EBSF_CurrentSt);
		fun << (EBSF_VoltSt);
		fun << (EBSF_TempSt);
		fun << (EBSF_CalibrationErr);
		fun << (EBSF_IdentificationErr);
		fun << (EBSF_Response_Err);
		fun << (EBSF_BattInconsistencyFlag);
		fun << (EBSF_SOC);
		fun << (EBSF_SOH_SUL);
		fun << (EBSF_SOFV_StopEnable);
		fun << (EBSF_SOFV_Restart);
		fun << (EBSF_SOH_LAM);
		fun << (EBSF_SOH_COR);
		fun << (EBSF_SOC_STATE);
		fun << (EBSF_SOH_SUL_St);
		fun << (EBSF_SOFV_StopEnable_St);
		fun << (EBSF_SOFV_Restart_St);
		fun << (EBSF_SOH_LAM_St);
		fun << (EBSF_SOH_COR_St);
		fun << (EBSF_Q_Charge);
		fun << (EBSF_Q_Discharge);
		fun << (EBST_BattVolt);
		fun << (EBST_CurrentRange);
		fun << (EBST_BattCurrent);
		fun << (EBST_BattTemp);
		fun << (EBST_BattQuiescentCurrent);
		fun << (EBST_CurrentSt);
		fun << (EBST_VoltSt);
		fun << (EBST_TempSt);
		fun << (EBST_CalibrationErr);
		fun << (EBST_IdentificationErr);
		fun << (EBST_Response_Err);
		fun << (EBST_BattInconsistencyFlag);
		fun << (EBST_SOC);
		fun << (EBST_SOH_SUL);
		fun << (EBST_SOFV_StopEnable);
		fun << (EBST_SOFV_Restart);
		fun << (EBST_SOH_LAM);
		fun << (EBST_SOH_COR);
		fun << (EBST_SOC_STATE);
		fun << (EBST_SOH_SUL_St);
		fun << (EBST_SOFV_StopEnable_St);
		fun << (EBST_SOFV_Restart_St);
		fun << (EBST_SOH_LAM_St);
		fun << (EBST_SOH_COR_St);
		fun << (EBST_Q_Charge);
		fun << (EBST_Q_Discharge);
	}
	template<typename F>
	void deserialize(F& fun){
		fun >> (EEM_EBSFSOCWakeUpEn);
		fun >> (EEM_EBSFSOC2WakeUpEn);
		fun >> (EEM_EBSTSOCWakeUpEn);
		fun >> (EEM_EBSTSOC2WakeUpEn);
		fun >> (EEM_LdCtlLv);
		fun >> (EEM_LdCtlSt);
		fun >> (EBSF_BattVolt);
		fun >> (EBSF_CurrentRange);
		fun >> (EBSF_BattCurrent);
		fun >> (EBSF_BattTemp);
		fun >> (EBSF_BattQuiescentCurrent);
		fun >> (EBSF_CurrentSt);
		fun >> (EBSF_VoltSt);
		fun >> (EBSF_TempSt);
		fun >> (EBSF_CalibrationErr);
		fun >> (EBSF_IdentificationErr);
		fun >> (EBSF_Response_Err);
		fun >> (EBSF_BattInconsistencyFlag);
		fun >> (EBSF_SOC);
		fun >> (EBSF_SOH_SUL);
		fun >> (EBSF_SOFV_StopEnable);
		fun >> (EBSF_SOFV_Restart);
		fun >> (EBSF_SOH_LAM);
		fun >> (EBSF_SOH_COR);
		fun >> (EBSF_SOC_STATE);
		fun >> (EBSF_SOH_SUL_St);
		fun >> (EBSF_SOFV_StopEnable_St);
		fun >> (EBSF_SOFV_Restart_St);
		fun >> (EBSF_SOH_LAM_St);
		fun >> (EBSF_SOH_COR_St);
		fun >> (EBSF_Q_Charge);
		fun >> (EBSF_Q_Discharge);
		fun >> (EBST_BattVolt);
		fun >> (EBST_CurrentRange);
		fun >> (EBST_BattCurrent);
		fun >> (EBST_BattTemp);
		fun >> (EBST_BattQuiescentCurrent);
		fun >> (EBST_CurrentSt);
		fun >> (EBST_VoltSt);
		fun >> (EBST_TempSt);
		fun >> (EBST_CalibrationErr);
		fun >> (EBST_IdentificationErr);
		fun >> (EBST_Response_Err);
		fun >> (EBST_BattInconsistencyFlag);
		fun >> (EBST_SOC);
		fun >> (EBST_SOH_SUL);
		fun >> (EBST_SOFV_StopEnable);
		fun >> (EBST_SOFV_Restart);
		fun >> (EBST_SOH_LAM);
		fun >> (EBST_SOH_COR);
		fun >> (EBST_SOC_STATE);
		fun >> (EBST_SOH_SUL_St);
		fun >> (EBST_SOFV_StopEnable_St);
		fun >> (EBST_SOFV_Restart_St);
		fun >> (EBST_SOH_LAM_St);
		fun >> (EBST_SOH_COR_St);
		fun >> (EBST_Q_Charge);
		fun >> (EBST_Q_Discharge);
	}
};

}//ara
}//com
}//vsomeip
#endif //__ARA_COM_VSOMEIP__BATTERYSIGNALGROUPDATA_H__
